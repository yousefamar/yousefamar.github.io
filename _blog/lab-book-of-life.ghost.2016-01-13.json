{"db":[{"meta":{"exported_on":1452723281988,"version":"003"},"data":{"posts":[{"id":2,"uuid":"e3da1ea1-a532-4c64-a3e4-22e2585055cd","title":"Hello, world!","slug":"about","markdown":"In an effort to consolidate my blogging endeavours, I'll be posting here from now on. Chances are said posts will centre around software and hardware but every once in a while something completely random might make its way in. The first few posts will probably be reposts of stuff I wrote before but after that, you, dear reader, can hopefully have the pleasure of getting a behind the scenes look at my projects or learning from thoughts, tips, and techniques that I get a chance to document.\r\n\r\nHappy trails!","html":"<p>In an effort to consolidate my blogging endeavours, I'll be posting here from now on. Chances are said posts will centre around software and hardware but every once in a while something completely random might make its way in. The first few posts will probably be reposts of stuff I wrote before but after that, you, dear reader, can hopefully have the pleasure of getting a behind the scenes look at my projects or learning from thoughts, tips, and techniques that I get a chance to document.</p>\n\n<p>Happy trails!</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":2,"created_at":1349794038000,"created_by":2,"updated_at":1371462522000,"updated_by":1,"published_at":1349794038000,"published_by":2},{"id":3,"uuid":"a588cafe-f145-4016-b929-4cf60c998a20","title":"Universal Resource Loading in Java","slug":"universal-resource-loading-in-java","markdown":"Loading images and files in Java is relatively simple. Maybe not through one-liners like in Python, but the trade-off is flexibility. There are a number of ways to load resources within a Java program. On searching the internet, you’ll probably find something like this.\r\n<pre class=\"prettyprint\">try{\r\n\tFile file = new File(\"file.txt\");\r\n\tFileInputStream fs = new FileInputStream(file);\r\n\tDataInputStream in = new DataInputStream(fs);\r\n\tBufferedReader br = new BufferedReader(new InputStreamReader(in));\r\n\tString line;\r\n\twhile ((line = br.readLine()) != null)\r\n\t\tSystem.out.println(line);\r\n\tin.close();\r\n} catch (Exception e) {\r\n\te.printStackTrace();\r\n}</pre>\r\nAlternatively, we could have simply passed in the file name as a String directly into the FileInputStream constructor.\r\n\r\nDataInputStreams are useful especially for reading binary files and calling methods such as “in.readInt()” amongst others for custom file formats. However, if we simply wanted to load a plain text file , there is an easier method.\r\n<pre class=\"prettyprint\">try{\r\n\tFile file = new File(\"file.txt\");\r\n\tBufferedReader br = new BufferedReader(new FileReader(file));\r\n\tString line;\r\n\twhile ((line = br.readLine()) != null)\r\n\t\tSystem.out.println(line);\r\n} catch (Exception e) {\r\n\te.printStackTrace();\r\n}</pre>\r\nYou might notice the fact that nobody ever bothers to cloes FileReaders, BufferedReaders, FileInputStreams and DataInputStreams by calling “close();” on their instances. This would be the primary reason to assign them to variables, not legibility, instead of cramming everything into one line. But that’s another story.\r\n\r\nAnyway, there are many different ways to load files and manage errors and eventually things get messy and you’ll find yourself having to catch exceptions left and right.<!--more-->\r\n\r\nThe same goes for loading images; the most common way to load an image is as follows.\r\n<pre class=\"prettyprint\">BufferedImage img = null;\r\ntry {\r\n\timg = ImageIO.read(new File(\"image.png\"));\r\n} catch (IOException e) {\r\n\te.printStackTrace();\r\n}</pre>\r\nIf all of this is so widely accepted, why am I complaining you ask? The number one biggest issue with loading files by far, is getting the paths right and there is a simple solution that few people know that I’ll share with you today.\r\n\r\nAssuming you’re creating an application that you plan to release, you’ll probably be packing your resources in the jar itself and want a relative path that you can get using “MyClass.class.getResource(“image.png”);” for example. However, if your project is reasonably complex, you might have organised your resources in folders such as “images/image.png” and you load it using that relative path thinking you’ve solved the problem.\r\n\r\n<strong>Problem #1: Cross-platform compatibility</strong>\r\n\r\nIf you choose your file separator to be “\\\\\" you’re in for a world of hurt once you realise that this only works on Windows. You might think “Oh well I’ll solve this inconsistency by typing it as “images”+File.separator+”image.png” ” and generally, that would be fine only there’s one problem: applets. But we’ll get to that later. For now, trust me when I say always use forward slashes (/).\r\n\r\n<strong>Problem #2: Applets</strong>\r\n\r\nIf you want to load an image in an applet, the standard way to go about it would be as follows.\r\n<pre class=\"prettyprint\">BufferedImage img = null;\r\ntry {\r\n\timg = ImageIO.read(new URL(\"http://www.example.com/image.png\"));\r\n} catch (IOException e) {\r\n\te.printStackTrace();\r\n}</pre>\r\nSo far it may seem fine. You can already imagine creating methods to store the root URL where the images are stored but it would only work for images outside of the jar and, depending on the server your jar is on, might be limited to getting images only off of that server.\r\n\r\nThen the much, much bigger problem appears. You can’t load files using the above methods. At all. If you try to convert your path names to URIs using the “toURI();” method, you’ll notice the path starts with “file://” or something similar depending on your OS. You simply cannot load resources that exist on a web server using the traditional techniques.\r\n\r\nEven worse, “File.separator” only applies to files! It will ruin the URL if you try it on a Windows PC so you <em>must</em> use “/” and I guarantee you it will work most anywhere.\r\n\r\nThere are several solutions that I wont bother boring you with for now. We want a universal, elegant and safe solution that will work on anything. Scroll down and skip the next part to read it if you want to skip my reasoning.\r\n\r\nNow if you’re like me, you’ll like to comply with intelligent standards and best practices but rage at things that have become “the standard way” out of tradition. This isn’t just a problem in programming; if you look at the field of economics for instance, you’ll find that when plotting supply and demand curves, price is put on the vertical axis simply because that’s the way it has always been done. Any mildly scientific person will tell you that it doesn’t make sense and that price should be on the horizontal axis and economists know this too but it doesn’t change because it’s too late! I digress.\r\n\r\nSo the only thing we can do is put in the extra mile to make sure our code works on all major OSs, browsers, and modes which I fundamentally believe is our duty as programmers. It doesn’t matter if I think Mac is crap, or if Windows 8 will ruin everything, people will use it and it is our job to fulfil these people’s needs to the best of our abilities.\r\n\r\n<strong>Solution</strong>\r\n\r\nNow to the final solution. I prefer to keep my resources in the jar themselves which (if you sign your jars) will guarantee that they are always there and you don’t have to rely on external resources. It’s also faster and safer than loading things from an arbitrary URL. The superior, little known way to load resources universally is as follows. Ready?\r\n\r\nFor images:\r\n<pre class=\"prettyprint\">BufferedImage img = null;\r\ntry {\r\n\timg = ImageIO.read(MyClass.class.getResource(\"images/\"+fileName));\r\n} catch (IOException e) {\r\n\te.printStackTrace();\r\n}</pre>\r\nWhere MyClass is a class in the same directory as the package/folder “images” and fileName is something like “image.png”.\r\n\r\nFor other files:\r\n<pre class=\"prettyprint\">try {\r\n\tInputStream in = MyClass.class.getResource(\"folder/\"+fileName).openStream();\r\n\tInputStreamReader ir = new InputStreamReader(in);\r\n\tBufferedReader br = new BufferedReader(ir);\r\n\tString line;\r\n\twhile ((line = br.readLine()) != null)\r\n\t\tSystem.out.println(line);\r\n\tbr.close();\r\n\tir.close();\r\n\tin.close();\r\n} catch (IOException e) {\r\n\te.printStackTrace();\r\n}</pre>\r\nNow of course there are a bunch of types of files you can load, but the key points here are getResource(…), forward slashes, openStream() and having clean code. This will always work no matter what and spare you the headaches especially if you’re coding an application that can run as an applet or standalone. The rest is up for experimentation.","html":"<p>Loading images and files in Java is relatively simple. Maybe not through one-liners like in Python, but the trade-off is flexibility. There are a number of ways to load resources within a Java program. On searching the internet, you’ll probably find something like this.  </p>\n\n<pre class=\"prettyprint\">try{  \n    File file = new File(\"file.txt\");\n    FileInputStream fs = new FileInputStream(file);\n    DataInputStream in = new DataInputStream(fs);\n    BufferedReader br = new BufferedReader(new InputStreamReader(in));\n    String line;\n    while ((line = br.readLine()) != null)\n        System.out.println(line);\n    in.close();\n} catch (Exception e) {\n    e.printStackTrace();\n}</pre>\n\n<p>Alternatively, we could have simply passed in the file name as a String directly into the FileInputStream constructor.</p>\n\n<p>DataInputStreams are useful especially for reading binary files and calling methods such as “in.readInt()” amongst others for custom file formats. However, if we simply wanted to load a plain text file , there is an easier method.  </p>\n\n<pre class=\"prettyprint\">try{  \n    File file = new File(\"file.txt\");\n    BufferedReader br = new BufferedReader(new FileReader(file));\n    String line;\n    while ((line = br.readLine()) != null)\n        System.out.println(line);\n} catch (Exception e) {\n    e.printStackTrace();\n}</pre>\n\n<p>You might notice the fact that nobody ever bothers to cloes FileReaders, BufferedReaders, FileInputStreams and DataInputStreams by calling “close();” on their instances. This would be the primary reason to assign them to variables, not legibility, instead of cramming everything into one line. But that’s another story.</p>\n\n<p>Anyway, there are many different ways to load files and manage errors and eventually things get messy and you’ll find yourself having to catch exceptions left and right.<!--more--></p>\n\n<p>The same goes for loading images; the most common way to load an image is as follows.  </p>\n\n<pre class=\"prettyprint\">BufferedImage img = null;  \ntry {  \n    img = ImageIO.read(new File(\"image.png\"));\n} catch (IOException e) {\n    e.printStackTrace();\n}</pre>\n\n<p>If all of this is so widely accepted, why am I complaining you ask? The number one biggest issue with loading files by far, is getting the paths right and there is a simple solution that few people know that I’ll share with you today.</p>\n\n<p>Assuming you’re creating an application that you plan to release, you’ll probably be packing your resources in the jar itself and want a relative path that you can get using “MyClass.class.getResource(“image.png”);” for example. However, if your project is reasonably complex, you might have organised your resources in folders such as “images/image.png” and you load it using that relative path thinking you’ve solved the problem.</p>\n\n<p><strong>Problem #1: Cross-platform compatibility</strong></p>\n\n<p>If you choose your file separator to be “\\\" you’re in for a world of hurt once you realise that this only works on Windows. You might think “Oh well I’ll solve this inconsistency by typing it as “images”+File.separator+”image.png” ” and generally, that would be fine only there’s one problem: applets. But we’ll get to that later. For now, trust me when I say always use forward slashes (/).</p>\n\n<p><strong>Problem #2: Applets</strong></p>\n\n<p>If you want to load an image in an applet, the standard way to go about it would be as follows.  </p>\n\n<pre class=\"prettyprint\">BufferedImage img = null;  \ntry {  \n    img = ImageIO.read(new URL(\"<a href='http://www.example.com/image.png'>http://www.example.com/image.png</a>\"));\n} catch (IOException e) {\n    e.printStackTrace();\n}</pre>\n\n<p>So far it may seem fine. You can already imagine creating methods to store the root URL where the images are stored but it would only work for images outside of the jar and, depending on the server your jar is on, might be limited to getting images only off of that server.</p>\n\n<p>Then the much, much bigger problem appears. You can’t load files using the above methods. At all. If you try to convert your path names to URIs using the “toURI();” method, you’ll notice the path starts with “file://” or something similar depending on your OS. You simply cannot load resources that exist on a web server using the traditional techniques.</p>\n\n<p>Even worse, “File.separator” only applies to files! It will ruin the URL if you try it on a Windows PC so you <em>must</em> use “/” and I guarantee you it will work most anywhere.</p>\n\n<p>There are several solutions that I wont bother boring you with for now. We want a universal, elegant and safe solution that will work on anything. Scroll down and skip the next part to read it if you want to skip my reasoning.</p>\n\n<p>Now if you’re like me, you’ll like to comply with intelligent standards and best practices but rage at things that have become “the standard way” out of tradition. This isn’t just a problem in programming; if you look at the field of economics for instance, you’ll find that when plotting supply and demand curves, price is put on the vertical axis simply because that’s the way it has always been done. Any mildly scientific person will tell you that it doesn’t make sense and that price should be on the horizontal axis and economists know this too but it doesn’t change because it’s too late! I digress.</p>\n\n<p>So the only thing we can do is put in the extra mile to make sure our code works on all major OSs, browsers, and modes which I fundamentally believe is our duty as programmers. It doesn’t matter if I think Mac is crap, or if Windows 8 will ruin everything, people will use it and it is our job to fulfil these people’s needs to the best of our abilities.</p>\n\n<p><strong>Solution</strong></p>\n\n<p>Now to the final solution. I prefer to keep my resources in the jar themselves which (if you sign your jars) will guarantee that they are always there and you don’t have to rely on external resources. It’s also faster and safer than loading things from an arbitrary URL. The superior, little known way to load resources universally is as follows. Ready?</p>\n\n<p>For images:  </p>\n\n<pre class=\"prettyprint\">BufferedImage img = null;  \ntry {  \n    img = ImageIO.read(MyClass.class.getResource(\"images/\"+fileName));\n} catch (IOException e) {\n    e.printStackTrace();\n}</pre>\n\n<p>Where MyClass is a class in the same directory as the package/folder “images” and fileName is something like “image.png”.</p>\n\n<p>For other files:  </p>\n\n<pre class=\"prettyprint\">try {  \n    InputStream in = MyClass.class.getResource(\"folder/\"+fileName).openStream();\n    InputStreamReader ir = new InputStreamReader(in);\n    BufferedReader br = new BufferedReader(ir);\n    String line;\n    while ((line = br.readLine()) != null)\n        System.out.println(line);\n    br.close();\n    ir.close();\n    in.close();\n} catch (IOException e) {\n    e.printStackTrace();\n}</pre>\n\n<p>Now of course there are a bunch of types of files you can load, but the key points here are getResource(…), forward slashes, openStream() and having clean code. This will always work no matter what and spare you the headaches especially if you’re coding an application that can run as an applet or standalone. The rest is up for experimentation.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":2,"created_at":1349803980000,"created_by":2,"updated_at":1371554927000,"updated_by":1,"published_at":1349803980000,"published_by":2},{"id":4,"uuid":"a5598884-70ba-4709-8954-726660e2722c","title":"Storing Terrain and Map Data in GIF Frames with Java","slug":"storing-terrain-and-map-data-in-gif-frames-with-java","markdown":"In Java, nobody really ever uses gifs (that is, images of the *.gif persuasion) and when they do, it’s usually as an ImageIcon for Swing GUIs and the like and even then they don’t look very professional.\r\n\r\nI feel like the GIF format is under-appreciated since it is pretty much the only common format able to store image layers in a lightweight manner, display them as an animation or each layer overlaying the next, have support in most image loading APIs, and is easily creatable in common image manipulation software such as GIMP or Photoshop.\r\n\r\nWith this in mind I have devised a technique to store terrain and entity data within the GIF format for easy visual editing.<!--more--> I don’t think anybody has ever loaded gifs layer by layer in this manner, let alone done anything quite like this in the first place, but it’s quite nice.\r\n<pre class=\"prettyprint\">BufferedImage tileMap = null;\r\nBufferedImage entityMap = null;\r\ntry {\r\n\tImageReader ir = ImageIO.getImageReadersBySuffix(\"GIF\").next();\r\n\tir.setInput(ImageIO.createImageInputStream(Terrain.class.getResource(\"maps/\"+mapName+\".gif\").openStream()));\r\n\ttileMap = ir.read(0);\r\n\tentityMap = ir.read(1);\r\n} catch (IOException e) {\r\n\tSystem.err.println(\"Unable to load custom map \"\"+mapName+\"\".\");\r\n}</pre>\r\nLet’s go through this step by step. First, we get an image reader that can read the GIF format (another advantage of using a well known format). Then we create an input stream using <a title=\"Universal Resource Loading in Java\" href=\"http://amarport.com/blog/?p=27\" target=\"_blank\">my preferred method</a>. To read the separate layers/frames, we simply use “ir.read(layerIndex);”. That’s it! So simple and yet so overlooked.\r\n\r\nUsing this technique, we can eventually turned this, an easily drawn map:\r\n\r\n<img alt=\"Test Map\" src=\"https://dl.dropbox.com/u/704818/web/tumblr/images/testMap.gif\" width=\"64\" height=\"64\" align=\"middle\" />\r\n\r\nTo this, a tile-based map for a 2D top-down game:\r\n<p style=\"text-align: center;\"><img alt=\"A tile based 2D top-down game\" src=\"https://dl.dropbox.com/u/704818/web/tumblr/images/screen1.png\" align=\"middle\" /></p>\r\n<img class=\"aligncenter\" alt=\"A tile based 2D top-down game\" src=\"https://dl.dropbox.com/u/704818/web/tumblr/images/screen2.png\" align=\"middle\" />\r\n\r\nIf you open up the gif above in GIMP for example, you’ll see the separate layers. Every pixel represents a tile type that eventually becomes a 32*32 tile. As such I obviously couldn’t depict the entire map as a 64*64 map (of which multiple exist, e.g. the inside of the house which is bigger on the inside by far) becomes a 2048*2048 world. How’s that for compacting data?\r\n\r\nAfter the image is loaded, we then iterate through the pixels and do with the information whatever we like, such as build a map while additionally being able to use data such as image size or settings encoded in one layer that can be interpreted using a custom protocol of your imagining.\r\n\r\nYou might be thinking “But GIFs are only limited to 8-bit colours and I have more than 256 tile types!”. Not only are you wrong (gifs can support far more than that in exchange for making the file bigger) but you’ve overlooked the layers! That’s the beauty of it! Even if you have a million tile/colour IDs for whatever reason, you can always reuse them in different layers. In this example I use one layer for the terrain and the other for trees, buildings and decorative entities but one could for instance use a layer for fluids (water, lava, etc.) one for plants, one for in-traversable tiles that you collide with (such as water or or rocks) instead of interpreting it from the tile type, and so on. And at the same time, you could have custom maps as you don’t need to be a programmer to create a gif. Is this not better than custom file formats and complicated map editors and tools? The possibilities are endless!","html":"<p>In Java, nobody really ever uses gifs (that is, images of the *.gif persuasion) and when they do, it’s usually as an ImageIcon for Swing GUIs and the like and even then they don’t look very professional.</p>\n\n<p>I feel like the GIF format is under-appreciated since it is pretty much the only common format able to store image layers in a lightweight manner, display them as an animation or each layer overlaying the next, have support in most image loading APIs, and is easily creatable in common image manipulation software such as GIMP or Photoshop.</p>\n\n<p>With this in mind I have devised a technique to store terrain and entity data within the GIF format for easy visual editing.<!--more--> I don’t think anybody has ever loaded gifs layer by layer in this manner, let alone done anything quite like this in the first place, but it’s quite nice.  </p>\n\n<pre class=\"prettyprint\">BufferedImage tileMap = null;  \nBufferedImage entityMap = null;  \ntry {  \n    ImageReader ir = ImageIO.getImageReadersBySuffix(\"GIF\").next();\n    ir.setInput(ImageIO.createImageInputStream(Terrain.class.getResource(\"maps/\"+mapName+\".gif\").openStream()));\n    tileMap = ir.read(0);\n    entityMap = ir.read(1);\n} catch (IOException e) {\n    System.err.println(\"Unable to load custom map \"\"+mapName+\"\".\");\n}</pre>\n\n<p>Let’s go through this step by step. First, we get an image reader that can read the GIF format (another advantage of using a well known format). Then we create an input stream using <a title=\"Universal Resource Loading in Java\" href=\"http://amarport.com/blog/?p=27\" target=\"_blank\">my preferred method</a>. To read the separate layers/frames, we simply use “ir.read(layerIndex);”. That’s it! So simple and yet so overlooked.</p>\n\n<p>Using this technique, we can eventually turned this, an easily drawn map:</p>\n\n<p><img alt=\"Test Map\" src=\"https://dl.dropbox.com/u/704818/web/tumblr/images/testMap.gif\" width=\"64\" height=\"64\" align=\"middle\" /></p>\n\n<p>To this, a tile-based map for a 2D top-down game:  </p>\n\n<p style=\"text-align: center;\"><img alt=\"A tile based 2D top-down game\" src=\"https://dl.dropbox.com/u/704818/web/tumblr/images/screen1.png\" align=\"middle\" /></p>  \n\n<p><img class=\"aligncenter\" alt=\"A tile based 2D top-down game\" src=\"https://dl.dropbox.com/u/704818/web/tumblr/images/screen2.png\" align=\"middle\" /></p>\n\n<p>If you open up the gif above in GIMP for example, you’ll see the separate layers. Every pixel represents a tile type that eventually becomes a 32<em>32 tile. As such I obviously couldn’t depict the entire map as a 64</em>64 map (of which multiple exist, e.g. the inside of the house which is bigger on the inside by far) becomes a 2048*2048 world. How’s that for compacting data?</p>\n\n<p>After the image is loaded, we then iterate through the pixels and do with the information whatever we like, such as build a map while additionally being able to use data such as image size or settings encoded in one layer that can be interpreted using a custom protocol of your imagining.</p>\n\n<p>You might be thinking “But GIFs are only limited to 8-bit colours and I have more than 256 tile types!”. Not only are you wrong (gifs can support far more than that in exchange for making the file bigger) but you’ve overlooked the layers! That’s the beauty of it! Even if you have a million tile/colour IDs for whatever reason, you can always reuse them in different layers. In this example I use one layer for the terrain and the other for trees, buildings and decorative entities but one could for instance use a layer for fluids (water, lava, etc.) one for plants, one for in-traversable tiles that you collide with (such as water or or rocks) instead of interpreting it from the tile type, and so on. And at the same time, you could have custom maps as you don’t need to be a programmer to create a gif. Is this not better than custom file formats and complicated map editors and tools? The possibilities are endless!</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":2,"created_at":1349820480000,"created_by":2,"updated_at":1371555118000,"updated_by":1,"published_at":1349820480000,"published_by":2},{"id":5,"uuid":"a0b54618-48bc-49a3-b5ea-3e92bb7ce747","title":"Reaching the Infamous Star in CLOP","slug":"reaching-the-infamous-star-in-clop","markdown":"In <a title=\"CLOP\" href=\"http://www.foddy.net/CLOP.html\" target=\"_blank\">CLOP</a>, you play a perambulatory challenged unicorn attempting to reach a virgin on the far side of a hill. Sound simple? What if I told you that CLOP was made by the same person who made <a title=\"GIRP\" href=\"http://www.foddy.net/GIRP.html\" target=\"_blank\">GIRP</a> and <a title=\"QWOP\" href=\"http://www.foddy.net/Athletics.html\" target=\"_blank\">QWOP</a>. Yeah, <em>that</em> QWOP.\r\n<div align=\"center\"><img alt=\"image\" src=\"http://media.tumblr.com/25612e330d15e0df7abd696874e3976a/tumblr_inline_mntty4wjIq1qz4rgp.png\" /></div>\r\nWell, although CLOP may seem easier at first, the learning curve only gets steeper as the game progresses. Even after trying what must have been hundreds of times by now, I still can’t get past the giant cliff about 3/4 of the way to the virgin.\r\n\r\nHowever, just like QWOP, it <em>is</em> possible. Furthermore there seems to be this spinning star near the start just above the viewport. If you get the jump just right in the right spot you can just about see it.\r\n<div align=\"center\"><img alt=\"image\" src=\"http://media.tumblr.com/2d72f7a109c97e10f2b8fe8b93def1bd/tumblr_inline_mnub98BqfF1qz4rgp.png\" /></div>\r\nIt doesn’t take many tries to realise how utterly impossible it is to reach it. The internet doesn’t seem to know what it is and it doesn’t look like anybody has ever reached it (prove me wrong). I <strong>must</strong> find out what it does.<!--more-->\r\n\r\n<!-- more -->\r\n\r\nJudging by the few YouTube play-throughs that there are, towards the end of the actual game it becomes a matter of luck no matter how good you are at timing the patterns (the ones I find work for me are HJ-KL, H-JK-H-KL, and HJ*-K/L by the way). Even though I already know how the game ends, I figure one day I’ll play it through since I know it’s possible.\r\n\r\nDifficult games like these have a certain quality to them; they can easily turn into obsessions for certain players, like the “Nintendo-hard” games of old. When a goal is virtually impossible though, like the reaching the star, some people chose to give up. Others chose to hack the game. Guess which category I fall into.\r\n\r\nA quick “Inspect Element” will reveal that the SWF file is located at http://www.foddy.net/CLOP.swf, so download and decompile that (I use <a title=\"JPEXS\" href=\"http://www.free-decompiler.com/\" target=\"_blank\">JPEXS</a>) and we have our source code.\r\n\r\nSure enough, everything we need is plain as day and not obfuscated. You can even read the entire list of Sherrod’s taunts in “PlayState” (one giant switch statement).\r\n<div align=\"center\"><img alt=\"image\" src=\"http://media.tumblr.com/b4dae3540724fb8ecea73909f53c701c/tumblr_inline_mntwonacjD1qz4rgp.png\" /></div>\r\n<span>The next step is to find the code responsible for the infamous star. I can immediately see a class called “Star” that loads the star sprite and plays the spinning animation and since the rest of the code is not obfuscated, all you need to do is search for where a “Star” is initialised.</span>\r\n\r\nInstead of cheating and bringing the star down rendering the goal far too easy, why not do something else that will step the goal down from impossible to “Nintendo-hard”? Hmm, let’s see…\r\n<pre class=\"prettyprint\">private var _gravity:Number = 270;</pre>\r\nMuahahaha! Let’s crank that down to 10 aaand yup, CLOP should now be able to fly. Time to try it out! But wait, what’s this?\r\n<div align=\"center\"><img alt=\"image\" src=\"http://media.tumblr.com/6d743e1b320ad65f03c1a3e09d88c6b7/tumblr_inline_mnu9m5hofJ1qz4rgp.png\" /></div>\r\nA quick search for “permission” yielded only one result in “FlxPreloader” (probably a feature of Flixel) and the if statement was quickly put out of commission.\r\n\r\nAnd presto, moon gravity mode! It’s a little hard to move now but it’s also hard to die since you complete a flip before you can hit the ground.\r\n<div align=\"center\"><img alt=\"image\" src=\"http://media.tumblr.com/f18c5ddf2e9b166be8197e57e388a289/tumblr_inline_mnua0pQKS91qz4rgp.png\" /></div>\r\nIf you want to play around with low gravity CLOP, drop me a line. I’d host it here but Bennett Foddy might not be too pleased about that.\r\n\r\nAfter flying around a bit it’s finally time to reach for the star. Does touching it grant us supernatural powers of dexterity beyond the wildest dreams of a unicorn? Does it teleport us to a world of rainbows and magic? Does it finally shut that SOB Sherrod up? Well, we’re about to find out. Then we’ll finally know if it is truly an easter egg that requires skills that transcend gaming and enter the realm of hacking to reach, or simply an artifact; an echo of an orphaned game feature that never quite made the cut. Here it is, the moment we’ve all been waiting for:\r\n<div align=\"center\"><img alt=\"image\" src=\"http://media.tumblr.com/93154e29eb0305b4bef05a12ab336e35/tumblr_inline_mnuahlSz4x1qz4rgp.gif\" /></div>\r\nWell that was anti-climactic…","html":"<p>In <a title=\"CLOP\" href=\"http://www.foddy.net/CLOP.html\" target=\"_blank\">CLOP</a>, you play a perambulatory challenged unicorn attempting to reach a virgin on the far side of a hill. Sound simple? What if I told you that CLOP was made by the same person who made <a title=\"GIRP\" href=\"http://www.foddy.net/GIRP.html\" target=\"_blank\">GIRP</a> and <a title=\"QWOP\" href=\"http://www.foddy.net/Athletics.html\" target=\"_blank\">QWOP</a>. Yeah, <em>that</em> QWOP.  </p>\n\n<div align=\"center\"><img alt=\"image\" src=\"http://media.tumblr.com/25612e330d15e0df7abd696874e3976a/tumblr_inline_mntty4wjIq1qz4rgp.png\" /></div>  \n\n<p>Well, although CLOP may seem easier at first, the learning curve only gets steeper as the game progresses. Even after trying what must have been hundreds of times by now, I still can’t get past the giant cliff about 3/4 of the way to the virgin.</p>\n\n<p>However, just like QWOP, it <em>is</em> possible. Furthermore there seems to be this spinning star near the start just above the viewport. If you get the jump just right in the right spot you can just about see it.  </p>\n\n<div align=\"center\"><img alt=\"image\" src=\"http://media.tumblr.com/2d72f7a109c97e10f2b8fe8b93def1bd/tumblr_inline_mnub98BqfF1qz4rgp.png\" /></div>  \n\n<p>It doesn’t take many tries to realise how utterly impossible it is to reach it. The internet doesn’t seem to know what it is and it doesn’t look like anybody has ever reached it (prove me wrong). I <strong>must</strong> find out what it does.<!--more--></p>\n\n<!-- more -->\n\n<p>Judging by the few YouTube play-throughs that there are, towards the end of the actual game it becomes a matter of luck no matter how good you are at timing the patterns (the ones I find work for me are HJ-KL, H-JK-H-KL, and HJ*-K/L by the way). Even though I already know how the game ends, I figure one day I’ll play it through since I know it’s possible.</p>\n\n<p>Difficult games like these have a certain quality to them; they can easily turn into obsessions for certain players, like the “Nintendo-hard” games of old. When a goal is virtually impossible though, like the reaching the star, some people chose to give up. Others chose to hack the game. Guess which category I fall into.</p>\n\n<p>A quick “Inspect Element” will reveal that the SWF file is located at <a href='http://www.foddy.net/CLOP.swf'>http://www.foddy.net/CLOP.swf</a>, so download and decompile that (I use <a title=\"JPEXS\" href=\"http://www.free-decompiler.com/\" target=\"_blank\">JPEXS</a>) and we have our source code.</p>\n\n<p>Sure enough, everything we need is plain as day and not obfuscated. You can even read the entire list of Sherrod’s taunts in “PlayState” (one giant switch statement).  </p>\n\n<div align=\"center\"><img alt=\"image\" src=\"http://media.tumblr.com/b4dae3540724fb8ecea73909f53c701c/tumblr_inline_mntwonacjD1qz4rgp.png\" /></div>  \n\n<p><span>The next step is to find the code responsible for the infamous star. I can immediately see a class called “Star” that loads the star sprite and plays the spinning animation and since the rest of the code is not obfuscated, all you need to do is search for where a “Star” is initialised.</span></p>\n\n<p>Instead of cheating and bringing the star down rendering the goal far too easy, why not do something else that will step the goal down from impossible to “Nintendo-hard”? Hmm, let’s see…  </p>\n\n<pre class=\"prettyprint\">private var _gravity:Number = 270;</pre>  \n\n<p>Muahahaha! Let’s crank that down to 10 aaand yup, CLOP should now be able to fly. Time to try it out! But wait, what’s this?  </p>\n\n<div align=\"center\"><img alt=\"image\" src=\"http://media.tumblr.com/6d743e1b320ad65f03c1a3e09d88c6b7/tumblr_inline_mnu9m5hofJ1qz4rgp.png\" /></div>  \n\n<p>A quick search for “permission” yielded only one result in “FlxPreloader” (probably a feature of Flixel) and the if statement was quickly put out of commission.</p>\n\n<p>And presto, moon gravity mode! It’s a little hard to move now but it’s also hard to die since you complete a flip before you can hit the ground.  </p>\n\n<div align=\"center\"><img alt=\"image\" src=\"http://media.tumblr.com/f18c5ddf2e9b166be8197e57e388a289/tumblr_inline_mnua0pQKS91qz4rgp.png\" /></div>  \n\n<p>If you want to play around with low gravity CLOP, drop me a line. I’d host it here but Bennett Foddy might not be too pleased about that.</p>\n\n<p>After flying around a bit it’s finally time to reach for the star. Does touching it grant us supernatural powers of dexterity beyond the wildest dreams of a unicorn? Does it teleport us to a world of rainbows and magic? Does it finally shut that SOB Sherrod up? Well, we’re about to find out. Then we’ll finally know if it is truly an easter egg that requires skills that transcend gaming and enter the realm of hacking to reach, or simply an artifact; an echo of an orphaned game feature that never quite made the cut. Here it is, the moment we’ve all been waiting for:  </p>\n\n<div align=\"center\"><img alt=\"image\" src=\"http://media.tumblr.com/93154e29eb0305b4bef05a12ab336e35/tumblr_inline_mnuahlSz4x1qz4rgp.gif\" /></div>  \n\n<p>Well that was anti-climactic…</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":2,"created_at":1370302200000,"created_by":2,"updated_at":1409263648000,"updated_by":1,"published_at":1370302200000,"published_by":2},{"id":6,"uuid":"ff4c5f74-5669-4963-9c7e-d2f039e0c6d5","title":"The Ternary Operator: Java vs PHP","slug":"the-ternary-operator-java-vs-php","markdown":"Oftentimes when verbosity isn’t required, I like to chain ternary operations (inline ifs) together. The resulting code isn’t necessarily hard to read with a trained eye. It’s for the same reason that doing this:\r\n<pre class=\"prettyprint\">var x = y || 'default';</pre>\r\nin JavaScript can save a lot of extra code and complexity. Ain’t nobody got time to check if a variable is undefined.\r\n\r\nHere’s something that took me a while to realise was the source of a bug though.<!--more--><!-- more --> Would you say these two snippets of code do the same thing?\r\n\r\nJava:\r\n<pre class=\"prettyprint\">public class Main {\r\n    public static void main(String []args){\r\n        boolean a = true;\r\n        boolean b = false;\r\n        int output = a?0:b?1:2;\r\n        System.out.println(output);\r\n    }\r\n}\r\n</pre>\r\nPHP:\r\n<pre class=\"prettyprint\">&lt;?php   \r\n    $a = true;\r\n    $b = false;\r\n    $output = $a?0:$b?1:2;\r\n    echo $output;\r\n?&gt;\r\n</pre>\r\nNope. Java does the intuitive (like most other C-like languages) and outputs 0. PHP outputs 2. Why? <span>Java and PHP Order of Operations/Operator Precedence can’t tell us anything because we’re comparing which of the same thing comes first.</span>\r\n\r\nIt turns out ternary expressions are evaluated from left to right in PHP. In Java the expression is the same as “a?0:(b?1:2)”. To get the same behaviour in PHP, you would need the brackets. As it stands, the expression in PHP is the same as “(a?0:b)?1:2” where (unlike in strongly-typed Java) 0 is evaluated as false making the final result 2.\r\n\r\nHere’s the same code again in C for good measure:\r\n<pre class=\"prettyprint\">#include &lt;stdio.h&gt;\r\n\r\nint main() {\r\n    int a = 1;\r\n    int b = 0;\r\n    int output = (a?0:b)?1:2;\r\n    printf(\"%d\", output);\r\n    return 0;\r\n}\r\n</pre>\r\nYup, outputs a 2 as expected. Beware of these little inconsistencies across syntactically similar languages; you never know when it will cost you hours of debugging!","html":"<p>Oftentimes when verbosity isn’t required, I like to chain ternary operations (inline ifs) together. The resulting code isn’t necessarily hard to read with a trained eye. It’s for the same reason that doing this:  </p>\n\n<pre class=\"prettyprint\">var x = y || 'default';</pre>  \nin JavaScript can save a lot of extra code and complexity. Ain’t nobody got time to check if a variable is undefined.\n\nHere’s something that took me a while to realise was the source of a bug though.<!--more--><!-- more --> Would you say these two snippets of code do the same thing?\n\nJava:  \n<pre class=\"prettyprint\">public class Main {  \n    public static void main(String []args){\n        boolean a = true;\n        boolean b = false;\n        int output = a?0:b?1:2;\n        System.out.println(output);\n    }\n}\n</pre>  \n\n<p>PHP:  </p>\n\n<pre class=\"prettyprint\">&lt;?php  \n    $a = true;\n    $b = false;\n    $output = $a?0:$b?1:2;\n    echo $output;\n?&gt;\n</pre>  \n\n<p>Nope. Java does the intuitive (like most other C-like languages) and outputs 0. PHP outputs 2. Why? <span>Java and PHP Order of Operations/Operator Precedence can’t tell us anything because we’re comparing which of the same thing comes first.</span></p>\n\n<p>It turns out ternary expressions are evaluated from left to right in PHP. In Java the expression is the same as “a?0:(b?1:2)”. To get the same behaviour in PHP, you would need the brackets. As it stands, the expression in PHP is the same as “(a?0:b)?1:2” where (unlike in strongly-typed Java) 0 is evaluated as false making the final result 2.</p>\n\n<p>Here’s the same code again in C for good measure:  </p>\n\n<pre class=\"prettyprint\">#include &lt;stdio.h&gt;\n\nint main() {  \n    int a = 1;\n    int b = 0;\n    int output = (a?0:b)?1:2;\n    printf(\"%d\", output);\n    return 0;\n}\n</pre>  \n\n<p>Yup, outputs a 2 as expected. Beware of these little inconsistencies across syntactically similar languages; you never know when it will cost you hours of debugging!</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":2,"created_at":1370359440000,"created_by":2,"updated_at":1409263161000,"updated_by":1,"published_at":1370359440000,"published_by":2},{"id":7,"uuid":"2c95181a-21b8-4ef8-8ac9-92b094ddf53b","title":"Client-side Password Verification in JavaScript","slug":"password-verification-in-client-side-javascript","markdown":"Business websites often only act as an online brochure. As such, those that need some kind of password protection often don’t go too all-out in implementing it. Reasons for this could be:\r\n<ul>\r\n\t<li><span>Skill; </span><span>checking user input client-side is much easier than server-side.</span></li>\r\n\t<li><span>Budget; why pay for a server only for checking passwords when you can just host your HTML/CSS/JS files online for much cheaper and not have to worry about any server-side scripting.</span></li>\r\n\t<li><span>Security; maybe the information you’re password protecting isn’t that critical and doesn’t need airtight security.</span></li>\r\n</ul>\r\n<span>The reason is most likely a combination of the latter two. However, a web developer can take just a few simple extra steps to make their website much more secure.<!--more--><!-- more --></span>\r\n<h2><span>What NOT To Do</span></h2>\r\n<span>Take </span><a href=\"http://www.zahnarzt-frankfurt.de/\" target=\"_blank\">http://www.zahnarzt-frankfurt.de/</a>, an informational website for a German association of dentists, for instance. I stumbled upon this particular specimen while searching for my own dentist’s phone number. The home page presents you with two buttons; one for patients and one for dentists. Clicking on the patients button will take you to the information that you, the patient, were looking for. Clicking on the dentists button will take you to a page with a single password field and a continue button.<span>\r\n</span>\r\n<div><img alt=\"image\" src=\"http://media.tumblr.com/49cedc5623d61d878f5df2322e4c2101/tumblr_inline_mo1hwztwEf1qz4rgp.png\" /></div>\r\nThe website itself looks semi-professional. It looks like it was made with a decent IDE but I can’t shake the suspicion that getting into this “Doctors Only section” isn’t very hard.\r\n\r\nTime to check out the source code. Inspect Element? Nope, right-click disabled. Haha now it’s obvious this web developer had something to hide. Let’s bring out the Developer Tools the old fashioned way and inspect that form from there. What’s this?\r\n<pre class=\"prettyprint\">&lt;form action=\"javascript:loadpage();\" method=\"post\" name=\"passwort\"&gt;</pre>\r\nBingo! Client-side verification. And right above it:\r\n<pre class=\"prettyprint\">&lt;script language=\"JavaScript\" type=\"text/JavaScript\"&gt;\r\n    &lt;!--\r\n    function loadpage() {\r\n        if (document.passwort.pswd.value != \"chirurgie\"){\r\n            document.location.href=\"passwort_falsch_en.html\"\r\n        } else {\r\n            document.location.href=\"chirurgie/\" + document.passwort.pswd.value + \".html\"\r\n        }\r\n    }\r\n    //--&gt;\r\n&lt;/script&gt;</pre>\r\nThe code above has been cleaned up slightly to make it readable. You can also tell by the developer’s style that JavaScript was <em>not</em> their first language to say the least. Well, now we know their dictionary word password and can successfully infiltrate the “Dentist Only section” without being dentists! 1337 h4x0r life.\r\n<h2>What To Do Instead</h2>\r\nObviously the best solution is to check everything server-side against a hashed password. <em>Hashed</em>, not encrypted; encrypted passwords can still be decrypted. The way I like to hash passwords is with a (randomly) salted SHA256 hash to have a nice balance between security and speed/complexity. That way even if somehow my servers are compromised by some insanely skilled hackers, they still can’t figure out my users’ passwords (which are all required to be complex; i.e. long, with capitals/numbers/punctuation, no dictionary words etc.) without spending a virtually infinite amount of time brute-forcing them.\r\n\r\nOn the client side however, the best we can do is hash a complex password with a strong, difficult to crack hash function like a salted SHA-3 hash (very easy in JavaScript) and hardcode it in. In fact, the hash algorithm can be as complex as we want because it’s all being run on the user’s computer and not wasting server CPU processing time. With just the hashed password, even the most skilled hacker can only attempt an educated brute-force attack. It would be easier for them to instead find the owner of the website and torture them into revealing the password.\r\n\r\nHere’s a practical example of client-side hashing and password verification in the same function as the example website above:\r\n<pre class=\"prettyprint\">var salt = 'Hack THIS!';\r\nvar hashedPass = '99c0c3ea5c83f8608f488100a1f42e6478fdb2042d24dee0f1c997c75d65efad';\r\nfunction loadpage() {\r\n    if (SHA256(salt+document.passwort.pswd.value) !== hashedPass){\r\n        document.location.href='passwort_falsch_en.html';\r\n    } else {\r\n        document.location.href='chirurgie/'+document.passwort.pswd.value+'.html';\r\n    }\r\n}</pre>\r\n<span>JavaScript hash functions can be found in libraries such as </span><a title=\"CryptoJS\" href=\"https://code.google.com/p/crypto-js/\" target=\"_blank\">CryptoJS</a><span> or just </span><a title=\"Webtoolkit Javascript SHA-256\" href=\"http://www.webtoolkit.info/javascript-sha256.html\" target=\"_blank\">online</a><span>. After some minification and obfuscation, this code would make the dentist website’s password verification leagues better with very little extra effort! </span>Of course make sure that visitors and web crawlers can’t see your protected pages! For visitors, use <span>.htaccess’ “Options All -Indexes”, or “IndexIgnore</span> ./zahnaerzte/chirurgie/*<span>” in this case, and for spiders, put “</span><span>Disallow: /</span><span>zahnaerzte/chirurgie/</span><span>” in your robots.txt (and hide that from visitors too!) and so on. Obviously there’s no point in implementing a timeout on too many password attempts as it would take mere seconds to circumvent.</span>\r\n\r\n<span>That’s all it takes to fend off script kiddies!</span>","html":"<p>Business websites often only act as an online brochure. As such, those that need some kind of password protection often don’t go too all-out in implementing it. Reasons for this could be:  </p>\n\n<ul>  \n    <li><span>Skill; </span><span>checking user input client-side is much easier than server-side.</span></li>\n    <li><span>Budget; why pay for a server only for checking passwords when you can just host your HTML/CSS/JS files online for much cheaper and not have to worry about any server-side scripting.</span></li>\n    <li><span>Security; maybe the information you’re password protecting isn’t that critical and doesn’t need airtight security.</span></li>\n</ul>  \n\n<p><span>The reason is most likely a combination of the latter two. However, a web developer can take just a few simple extra steps to make their website much more secure.<!--more--><!-- more --></span>  </p>\n\n<h2><span>What NOT To Do</span></h2>  \n\n<p><span>Take </span><a href=\"http://www.zahnarzt-frankfurt.de/\" target=\"_blank\">http://www.zahnarzt-frankfurt.de/</a>, an informational website for a German association of dentists, for instance. I stumbled upon this particular specimen while searching for my own dentist’s phone number. The home page presents you with two buttons; one for patients and one for dentists. Clicking on the patients button will take you to the information that you, the patient, were looking for. Clicking on the dentists button will take you to a page with a single password field and a continue button.<span> <br />\n</span>  </p>\n\n<div><img alt=\"image\" src=\"http://media.tumblr.com/49cedc5623d61d878f5df2322e4c2101/tumblr_inline_mo1hwztwEf1qz4rgp.png\" /></div>  \n\n<p>The website itself looks semi-professional. It looks like it was made with a decent IDE but I can’t shake the suspicion that getting into this “Doctors Only section” isn’t very hard.</p>\n\n<p>Time to check out the source code. Inspect Element? Nope, right-click disabled. Haha now it’s obvious this web developer had something to hide. Let’s bring out the Developer Tools the old fashioned way and inspect that form from there. What’s this?  </p>\n\n<pre class=\"prettyprint\">&lt;form action=\"javascript:loadpage();\" method=\"post\" name=\"passwort\"&gt;</pre>  \n\n<p>Bingo! Client-side verification. And right above it:  </p>\n\n<pre class=\"prettyprint\">&lt;script language=\"JavaScript\" type=\"text/JavaScript\"&gt;  \n    &lt;!--\n    function loadpage() {\n        if (document.passwort.pswd.value != \"chirurgie\"){\n            document.location.href=\"passwort_falsch_en.html\"\n        } else {\n            document.location.href=\"chirurgie/\" + document.passwort.pswd.value + \".html\"\n        }\n    }\n    //--&gt;\n&lt;/script&gt;</pre>\n\n<p>The code above has been cleaned up slightly to make it readable. You can also tell by the developer’s style that JavaScript was <em>not</em> their first language to say the least. Well, now we know their dictionary word password and can successfully infiltrate the “Dentist Only section” without being dentists! 1337 h4x0r life.  </p>\n\n<h2>What To Do Instead</h2>  \n\n<p>Obviously the best solution is to check everything server-side against a hashed password. <em>Hashed</em>, not encrypted; encrypted passwords can still be decrypted. The way I like to hash passwords is with a (randomly) salted SHA256 hash to have a nice balance between security and speed/complexity. That way even if somehow my servers are compromised by some insanely skilled hackers, they still can’t figure out my users’ passwords (which are all required to be complex; i.e. long, with capitals/numbers/punctuation, no dictionary words etc.) without spending a virtually infinite amount of time brute-forcing them.</p>\n\n<p>On the client side however, the best we can do is hash a complex password with a strong, difficult to crack hash function like a salted SHA-3 hash (very easy in JavaScript) and hardcode it in. In fact, the hash algorithm can be as complex as we want because it’s all being run on the user’s computer and not wasting server CPU processing time. With just the hashed password, even the most skilled hacker can only attempt an educated brute-force attack. It would be easier for them to instead find the owner of the website and torture them into revealing the password.</p>\n\n<p>Here’s a practical example of client-side hashing and password verification in the same function as the example website above:  </p>\n\n<pre class=\"prettyprint\">var salt = 'Hack THIS!';  \nvar hashedPass = '99c0c3ea5c83f8608f488100a1f42e6478fdb2042d24dee0f1c997c75d65efad';  \nfunction loadpage() {  \n    if (SHA256(salt+document.passwort.pswd.value) !== hashedPass){\n        document.location.href='passwort_falsch_en.html';\n    } else {\n        document.location.href='chirurgie/'+document.passwort.pswd.value+'.html';\n    }\n}</pre>\n\n<p><span>JavaScript hash functions can be found in libraries such as </span><a title=\"CryptoJS\" href=\"https://code.google.com/p/crypto-js/\" target=\"_blank\">CryptoJS</a><span> or just </span><a title=\"Webtoolkit Javascript SHA-256\" href=\"http://www.webtoolkit.info/javascript-sha256.html\" target=\"_blank\">online</a><span>. After some minification and obfuscation, this code would make the dentist website’s password verification leagues better with very little extra effort! </span>Of course make sure that visitors and web crawlers can’t see your protected pages! For visitors, use <span>.htaccess’ “Options All -Indexes”, or “IndexIgnore</span> ./zahnaerzte/chirurgie/*<span>” in this case, and for spiders, put “</span><span>Disallow: /</span><span>zahnaerzte/chirurgie/</span><span>” in your robots.txt (and hide that from visitors too!) and so on. Obviously there’s no point in implementing a timeout on too many password attempts as it would take mere seconds to circumvent.</span></p>\n\n<p><span>That’s all it takes to fend off script kiddies!</span></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":2,"created_at":1370642760000,"created_by":2,"updated_at":1409263467000,"updated_by":1,"published_at":1370642760000,"published_by":2},{"id":8,"uuid":"d8c3084f-2462-4328-9b16-e139b9068b36","title":"Hacking Every Second Counts","slug":"hacking-every-second-counts","markdown":"Once again I needed a break from hardcore coding and decided to play some online games. As I was surfing around I came across <a title=\"EverySecond\" href=\"http://www.zefrank.com/everysecond/index.html\" target=\"_blank\">this game</a> on zefrank.com, a website as old as the internet itself. A simple game that tests the accuracy of your internal clock with no end. The only incentive is beating the people on the highscore list. The player with the highest score gets to leave a little message for the world to see.\r\n<div><img class=\"aligncenter\" alt=\"image\" src=\"http://media.tumblr.com/9697cdbf0ea95135a4b2bdd6bc172606/tumblr_inline_mohogrvnYx1qz4rgp.png\" /></div>\r\nThe game is not at all easy even if you use some kind of timer and it’s pretty safe to assume that #1 is there to stay. Or is he?<!--more--><!-- more -->\r\n\r\nI’ve decided to hack this. I’m still not sure if it will work (I’m literally typing this at the same time as said hacking) but I have high hopes since it’s unlikely there’s going to be a lot of security layers in my way. I wouldn’t even really call it “hacking”. Ze, if you’re reading this, I’m sorry ahead of time and if I do end up on the highscore list, feel free to remove me from your database.\r\n\r\nChanging the score with the usual memory scanner/hex editor treatment looks like a no-go alone due to the nature of the game. Right, so let decompile the code and look for anything immediately noticeable. Ah a url:\r\n\r\nhttp://www.zefrank.com/everysecond/getdata.php?tablename=everysecond&amp;cache=“+random(999),”_root.highscore”\r\n\r\nLooks like it queries some database for data via PHP. Plug in a random number up to 999 and you get this:\r\n\r\n<span>&amp;name0=Sorry Sean..&amp;score0=136.2&amp;extra0=How the mighty have fallen! ~Matt&amp;name1=BIG SEAN&amp;score1=135&amp;extra1=VICTORY IS MINE- I LEAVE BEHIND ME A PATH OF DESTRUCTION, A LEGACY OF TRIUMPH. KNEEL BEFORE MY AWESOME POWER AND TYRANNY; THIS CONQUEST OF THE SCIENCES SHALL FOREVER BE REMEMBERED IN AWE AND FEAR. KNEEL!!&amp;name2=JoJoBloMo&amp;score2=125.2&amp;extra2=I am internet famous! This is a story all about how my life got flipped, turned upside down… Go to flash.landrycoolers.com to learn how to get these high scores.&amp;name3=Logger067&amp;score3=104.4&amp;extra3=Ha-ha! Losers!&amp;name4=Ralle&amp;score4=100&amp;extra4=Hahahaha!</span>\r\n\r\nNice! Looks like we can read the messages for all the runner-ups too. You don’t even need the “cache” variable. Let’s clean that up a bit:\r\n\r\n<span>Sorry Sean.. - 136.2\r\n</span><span>How the mighty have fallen! ~Matt</span>\r\n\r\n<span>BIG SEAN - 135\r\n</span><span>VICTORY IS MINE- I LEAVE BEHIND ME A PATH OF DESTRUCTION, A LEGACY OF TRIUMPH. KNEEL BEFORE MY AWESOME POWER AND TYRANNY; THIS CONQUEST OF THE SCIENCES SHALL FOREVER BE REMEMBERED IN AWE AND FEAR. KNEEL!!</span>\r\n\r\n<span>JoJoBloMo - 125.2\r\n</span><span>I am internet famous! This is a story all about how my life got flipped, turned upside down… Go to flash.landrycoolers.com to learn how to get these high scores.</span>\r\n\r\n<span>Logger067 - 104.4\r\n</span><span>Ha-ha! Losers!</span>\r\n\r\n<span>Ralle - </span><span>100\r\n</span><span>Hahahaha!</span>\r\n\r\nSo far so good! It looked like JoJoBloMo may have gotten there before me but their website seems to be dead and has nothing relevant on it on <a title=\"WayBack Machine\" href=\"http://archive.org/web/web.php\" target=\"_blank\">WayBack Machine</a>. Chances are some of them got those scores unfairly too though. To get a score of 100 you would have to play perfectly for 16.83 minutes (0.2 * n*(n+1)/2) and to beat “Matt” you need to do the same for at least 31.14 mins. Ain’t nobody got time fo’ that!\r\n\r\nSo let’s see what else we can find…\r\n<pre class=\"prettyprint\">if(!(_root.level&lt;hiscore))\r\n{\r\n   submit.userscore=_root.level;\r\n   win_message=\"Cogratulations! You have the top score. Enter your name below, as well as you victory message and press submit.\";\r\n}\r\nelse\r\n{\r\n   win_message=\"Cogratulations! You have a high score. Enter your name below and press submit.\";\r\n   submit.userscore=_root.level;\r\n   submit.usermessage=\"You need the top score to post a message!\";\r\n}\r\nupdate();\r\nstop();</pre>\r\nAnd Jackpot!\r\n<pre class=\"prettyprint\">if(userscore&gt;_root.lowestscore&amp;&amp;sent&lt;1)\r\n{\r\n   sent=1;\r\n   output=\"please wait : sending score\";\r\n   lowscore=_root.lowestscore;\r\n   loadVariables(\"http://www.zefrank.com/everysecond/insertdelete.php?tablename=everysecond&amp;cache=\"+random(9999),this);\r\n}</pre>\r\nHuehuehuehue…\r\n\r\nWell, I don’t feel like trying to figure out what the correct GET variables are and I don’t want to screw it up so instead I’ll just set the starting level to 1337 (literally just a single assignment) and lose the game immediately. It would take 49.69 perfect, non-stop hours to get that score fairly. Advertising my blog in the message may be a bit tactless so instead I’ll just let whoever sees it google my name for more info.\r\n<div><img class=\"aligncenter\" alt=\"image\" src=\"http://media.tumblr.com/95076a9d7cb16a34893da1ab460354cf/tumblr_inline_mohugrhaM81qz4rgp.png\" /></div>\r\nAnd happy trails to you too!","html":"<p>Once again I needed a break from hardcore coding and decided to play some online games. As I was surfing around I came across <a title=\"EverySecond\" href=\"http://www.zefrank.com/everysecond/index.html\" target=\"_blank\">this game</a> on zefrank.com, a website as old as the internet itself. A simple game that tests the accuracy of your internal clock with no end. The only incentive is beating the people on the highscore list. The player with the highest score gets to leave a little message for the world to see.  </p>\n\n<div><img class=\"aligncenter\" alt=\"image\" src=\"http://media.tumblr.com/9697cdbf0ea95135a4b2bdd6bc172606/tumblr_inline_mohogrvnYx1qz4rgp.png\" /></div>  \n\n<p>The game is not at all easy even if you use some kind of timer and it’s pretty safe to assume that #1 is there to stay. Or is he?<!--more--><!-- more --></p>\n\n<p>I’ve decided to hack this. I’m still not sure if it will work (I’m literally typing this at the same time as said hacking) but I have high hopes since it’s unlikely there’s going to be a lot of security layers in my way. I wouldn’t even really call it “hacking”. Ze, if you’re reading this, I’m sorry ahead of time and if I do end up on the highscore list, feel free to remove me from your database.</p>\n\n<p>Changing the score with the usual memory scanner/hex editor treatment looks like a no-go alone due to the nature of the game. Right, so let decompile the code and look for anything immediately noticeable. Ah a url:</p>\n\n<p><a href='http://www.zefrank.com/everysecond/getdata.php?tablename=everysecond&amp;cache=“+random(999),”_root.highscore”'>http://www.zefrank.com/everysecond/getdata.php?tablename=everysecond&amp;cache=“+random(999),”_root.highscore”</a></p>\n\n<p>Looks like it queries some database for data via PHP. Plug in a random number up to 999 and you get this:</p>\n\n<p><span>&amp;name0=Sorry Sean..&amp;score0=136.2&amp;extra0=How the mighty have fallen! ~Matt&amp;name1=BIG SEAN&amp;score1=135&amp;extra1=VICTORY IS MINE- I LEAVE BEHIND ME A PATH OF DESTRUCTION, A LEGACY OF TRIUMPH. KNEEL BEFORE MY AWESOME POWER AND TYRANNY; THIS CONQUEST OF THE SCIENCES SHALL FOREVER BE REMEMBERED IN AWE AND FEAR. KNEEL!!&amp;name2=JoJoBloMo&amp;score2=125.2&amp;extra2=I am internet famous! This is a story all about how my life got flipped, turned upside down… Go to flash.landrycoolers.com to learn how to get these high scores.&amp;name3=Logger067&amp;score3=104.4&amp;extra3=Ha-ha! Losers!&amp;name4=Ralle&amp;score4=100&amp;extra4=Hahahaha!</span></p>\n\n<p>Nice! Looks like we can read the messages for all the runner-ups too. You don’t even need the “cache” variable. Let’s clean that up a bit:</p>\n\n<p><span>Sorry Sean.. - 136.2 <br />\n</span><span>How the mighty have fallen! ~Matt</span></p>\n\n<p><span>BIG SEAN - 135 <br />\n</span><span>VICTORY IS MINE- I LEAVE BEHIND ME A PATH OF DESTRUCTION, A LEGACY OF TRIUMPH. KNEEL BEFORE MY AWESOME POWER AND TYRANNY; THIS CONQUEST OF THE SCIENCES SHALL FOREVER BE REMEMBERED IN AWE AND FEAR. KNEEL!!</span></p>\n\n<p><span>JoJoBloMo - 125.2 <br />\n</span><span>I am internet famous! This is a story all about how my life got flipped, turned upside down… Go to flash.landrycoolers.com to learn how to get these high scores.</span></p>\n\n<p><span>Logger067 - 104.4 <br />\n</span><span>Ha-ha! Losers!</span></p>\n\n<p><span>Ralle - </span><span>100 <br />\n</span><span>Hahahaha!</span></p>\n\n<p>So far so good! It looked like JoJoBloMo may have gotten there before me but their website seems to be dead and has nothing relevant on it on <a title=\"WayBack Machine\" href=\"http://archive.org/web/web.php\" target=\"_blank\">WayBack Machine</a>. Chances are some of them got those scores unfairly too though. To get a score of 100 you would have to play perfectly for 16.83 minutes (0.2 * n*(n+1)/2) and to beat “Matt” you need to do the same for at least 31.14 mins. Ain’t nobody got time fo’ that!</p>\n\n<p>So let’s see what else we can find…  </p>\n\n<pre class=\"prettyprint\">if(!(_root.level&lt;hiscore))  \n{\n   submit.userscore=_root.level;\n   win_message=\"Cogratulations! You have the top score. Enter your name below, as well as you victory message and press submit.\";\n}\nelse  \n{\n   win_message=\"Cogratulations! You have a high score. Enter your name below and press submit.\";\n   submit.userscore=_root.level;\n   submit.usermessage=\"You need the top score to post a message!\";\n}\nupdate();  \nstop();</pre>  \n\n<p>And Jackpot!  </p>\n\n<pre class=\"prettyprint\">if(userscore&gt;_root.lowestscore&amp;&amp;sent&lt;1)  \n{\n   sent=1;\n   output=\"please wait : sending score\";\n   lowscore=_root.lowestscore;\n   loadVariables(\"<a href='http://www.zefrank.com/everysecond/insertdelete.php?tablename=everysecond&amp;cache='>http://www.zefrank.com/everysecond/insertdelete.php?tablename=everysecond&amp;cache=</a>\"+random(9999),this);\n}</pre>\n\n<p>Huehuehuehue…</p>\n\n<p>Well, I don’t feel like trying to figure out what the correct GET variables are and I don’t want to screw it up so instead I’ll just set the starting level to 1337 (literally just a single assignment) and lose the game immediately. It would take 49.69 perfect, non-stop hours to get that score fairly. Advertising my blog in the message may be a bit tactless so instead I’ll just let whoever sees it google my name for more info.  </p>\n\n<div><img class=\"aligncenter\" alt=\"image\" src=\"http://media.tumblr.com/95076a9d7cb16a34893da1ab460354cf/tumblr_inline_mohugrhaM81qz4rgp.png\" /></div>  \n\n<p>And happy trails to you too!</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":2,"created_at":1371399720000,"created_by":2,"updated_at":1409263370000,"updated_by":1,"published_at":1371399720000,"published_by":2},{"id":9,"uuid":"33ddf68c-53b5-43bc-afe6-fd209b6c1692","title":"Migration to WordPress","slug":"migration-to-wordpress","markdown":"After taking a closer look at what WordPress has to offer, I don't know what I was thinking using Tumblr as a blogging platform. Not that I left Tumblr because it's bad, it's just not at all suited for my kind of format. WordPress is to Tumblr what Tumblr is to Twitter if that makes any sense. I didn't leave Tumblr because Yahoo bought it, just to be clear.\r\n\r\nSo now I have much better control over what goes on here especially since all of this is running on my own server. This will probably mean I'll post more stuff too!","html":"<p>After taking a closer look at what WordPress has to offer, I don't know what I was thinking using Tumblr as a blogging platform. Not that I left Tumblr because it's bad, it's just not at all suited for my kind of format. WordPress is to Tumblr what Tumblr is to Twitter if that makes any sense. I didn't leave Tumblr because Yahoo bought it, just to be clear.</p>\n\n<p>So now I have much better control over what goes on here especially since all of this is running on my own server. This will probably mean I'll post more stuff too!</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":2,"created_at":1371461699000,"created_by":2,"updated_at":1371468158000,"updated_by":1,"published_at":1371461699000,"published_by":2},{"id":10,"uuid":"96329c66-7d46-4080-ad9c-b9a158971034","title":"Ludum Dare 27: \"10 Seconds\" Entry","slug":"ludum-dare-27-10-seconds-entry","markdown":"Last weekend I submitted my new game, <a title=\"Out of Breath\" href=\"http://www.ludumdare.com/compo/ludum-dare-27/?action=preview&amp;uid=21239\" target=\"_blank\">Out of Breath</a>, for the 27th <a title=\"Ludum Dare\" href=\"http://www.ludumdare.com/\" target=\"_blank\">Ludum Dare</a> competition; the first ever I've found the time to finish for Ludum Dare. Written in JavaScript from scratch with zero libraries!\n\nHere are some screenshots:\n\n<img class=\"   \" alt=\"Out of Breath Screenshot 1\" src=\"http://www.ludumdare.com/compo/wp-content/compo2/273708/21239-shot0.png\" width=\"800\" height=\"450\" /></img> *Searching for the Treasure*\n\n<!--more-->\n\n<img class=\"   \" alt=\"Out of Breath Screenshot 2\" src=\"http://www.ludumdare.com/compo/wp-content/compo2/273708/21239-shot1.png\" width=\"800\" height=\"450\" /> *Waiting for some Bubbles*\n\n<img class=\"   \" alt=\"Out of Breath Screenshot 3\" src=\"http://www.ludumdare.com/compo/wp-content/compo2/273708/21239-shot2.png\" width=\"800\" height=\"450\" /> *Chilling in a Cavern*\n\n<img class=\"    \" alt=\"Out of Breath Screenshot 4\" src=\"http://www.ludumdare.com/compo/wp-content/compo2/273708/21239-shot3.png\" width=\"800\" height=\"450\" /> *Skirting Stalagmites and Stalactites*\n\nYou can play the game here too if you want; just scroll down. Controls are WASD or arrow keys. The game has been tested in Chrome and FireFox, but I recommend Chrome since it seems to give me a faster frame rate.\n\nIf the game seems impossibly hard, it only means that you were very, very, VERY unlucky. Refresh the page to generate a more normal distribution of flora. Art and sound are quite lacking to say the least, but the game does have an \"ending\" so don't give up! I'll definitely continue working on it after the LD27.\n\nThe source code can either be viewed within your browser the standard way (it is entirely unobfuscated although not very commented) or downloaded in a zip file. It's not open source yet though so please don't steal. ;)\n\nEnjoy!\n\n<script type=\"text/javascript\">\nfunction removeCanvasMargin() {\n\tvar gameFrame = document.getElementById('gameFrame');\n\tvar canvas = (gameFrame.contentDocument || gameFrame.contentWindow.document).getElementById('canvas').style.marginTop = 0;\n}\n</script>\n<center><iframe id=\"gameFrame\" src=\"/apps/outofbreath\" height=\"450\" width=\"800\" onload=\"removeCanvasMargin()\"></iframe></center>","html":"<p>Last weekend I submitted my new game, <a title=\"Out of Breath\" href=\"http://www.ludumdare.com/compo/ludum-dare-27/?action=preview&amp;uid=21239\" target=\"_blank\">Out of Breath</a>, for the 27th <a title=\"Ludum Dare\" href=\"http://www.ludumdare.com/\" target=\"_blank\">Ludum Dare</a> competition; the first ever I've found the time to finish for Ludum Dare. Written in JavaScript from scratch with zero libraries!</p>\n\n<p>Here are some screenshots:</p>\n\n<p><img class=\"   \" alt=\"Out of Breath Screenshot 1\" src=\"http://www.ludumdare.com/compo/wp-content/compo2/273708/21239-shot0.png\" width=\"800\" height=\"450\" /></img> <em>Searching for the Treasure</em></p>\n\n<!--more-->\n\n<p><img class=\"   \" alt=\"Out of Breath Screenshot 2\" src=\"http://www.ludumdare.com/compo/wp-content/compo2/273708/21239-shot1.png\" width=\"800\" height=\"450\" /> <em>Waiting for some Bubbles</em></p>\n\n<p><img class=\"   \" alt=\"Out of Breath Screenshot 3\" src=\"http://www.ludumdare.com/compo/wp-content/compo2/273708/21239-shot2.png\" width=\"800\" height=\"450\" /> <em>Chilling in a Cavern</em></p>\n\n<p><img class=\"    \" alt=\"Out of Breath Screenshot 4\" src=\"http://www.ludumdare.com/compo/wp-content/compo2/273708/21239-shot3.png\" width=\"800\" height=\"450\" /> <em>Skirting Stalagmites and Stalactites</em></p>\n\n<p>You can play the game here too if you want; just scroll down. Controls are WASD or arrow keys. The game has been tested in Chrome and FireFox, but I recommend Chrome since it seems to give me a faster frame rate.</p>\n\n<p>If the game seems impossibly hard, it only means that you were very, very, VERY unlucky. Refresh the page to generate a more normal distribution of flora. Art and sound are quite lacking to say the least, but the game does have an \"ending\" so don't give up! I'll definitely continue working on it after the LD27.</p>\n\n<p>The source code can either be viewed within your browser the standard way (it is entirely unobfuscated although not very commented) or downloaded in a zip file. It's not open source yet though so please don't steal. ;)</p>\n\n<p>Enjoy!</p>\n\n<script type=\"text/javascript\">  \nfunction removeCanvasMargin() {  \n    var gameFrame = document.getElementById('gameFrame');\n    var canvas = (gameFrame.contentDocument || gameFrame.contentWindow.document).getElementById('canvas').style.marginTop = 0;\n}\n</script>  \n\n<p><center><iframe id=\"gameFrame\" src=\"/apps/outofbreath\" height=\"450\" width=\"800\" onload=\"removeCanvasMargin()\"></iframe></center></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":2,"created_at":1377535839000,"created_by":2,"updated_at":1410561664419,"updated_by":1,"published_at":1377535839000,"published_by":2},{"id":11,"uuid":"1e67a5ce-15e1-4321-8d25-05234e7a265c","title":"Apple Maps 3D: How did they do it?","slug":"apple-maps-3d-how-did-they-do-it","markdown":"With the release of OS X Mavericks came a bunch of new features like full screen support on multiple monitors (about time, Apple!). One other such feature is the new Maps app. Its unique selling point is 3D flyover maps. How does it work?<!--more-->\n\n<a href=\"http://amar.io/blog/wp-content/uploads/2013/10/new-york-3d.png\"><img class=\"size-full wp-image-127 \" alt=\"New York City, now in 3D!\" src=\"http://amarport.com/blog/wp-content/uploads/2013/10/new-york-3d.png\" width=\"1000\" height=\"691\" /></a> *New York City, now in 3D!*\n\nNot too shabby! Here’s the same shot in Google Earth for comparison:\n\n<a href=\"http://amar.io/blog/wp-content/uploads/2013/10/new-york-4d.png\"><img class=\"size-full wp-image-128 \" alt=\"Smooth as always, Google!\" src=\"http://amarport.com/blog/wp-content/uploads/2013/10/new-york-4d.png\" width=\"1107\" height=\"666\" /></a> *Smooth as always, Google!*\n\nSorry, but I’m gonna have to side with Google on this one on aesthetics! 3D models in Google Earth are often crowdsourced and built and skinned my hand using the idiot-proof modeling tool Google Sketchup. They’re made to look right. Apple’s Maps on the other hand are built automatically.\n\nBack in late 2011, Apple bought up a Swedish 3D mapping company called C3 Technologies that then disappeared off the radar. C3′s mapping technology was originally intended to help missiles home in on targets but was then used by Nokia’s map app Ovi, before Apple bought the company.\n\nHow does it work? It involves taking pictures at a whole range of different angles to the ground from a plane then using computer vision software figure out depth from different images of the same object just like our own eyes do.<a title=\"Ultrasharp 3-D Maps\" href=\"http://www.technologyreview.com/news/423838/ultrasharp-3-d-maps/\" target=\"_blank\">[1]</a>\n\nThat’s why it gets a little wobbly when you zoom in. The advantage is that the skin quality is often much better. Here’s an image of the clock tower at my university in the Maps app:\n\n<a href=\"http://amar.io/blog/wp-content/uploads/2013/10/old-joe-front.png\"><img class=\"size-full wp-image-130 \" alt=\"Old Joe’s Front\" src=\"http://amarport.com/blog/wp-content/uploads/2013/10/old-joe-front.png\" width=\"1002\" height=\"692\" /></a> *Old Joe’s Front*\n\nAnd here it is from the other side:\n\n<a href=\"http://amar.io/blog/wp-content/uploads/2013/10/old-joe-back.png\"><img class=\"size-full wp-image-129 \" alt=\"Old Joe’s Behind ಠ>_>ಠ\" src=\"http://amarport.com/blog/wp-content/uploads/2013/10/old-joe-back.png\" width=\"1001\" height=\"691\" /></a> *Old Joe’s Behind ಠ>_>*\n\nYou’ll notice the that in each image, one side of the clock tower is a couple of hours apart temporally from the other side. Clearly the plane must have flown by more than once to get all the sides. Another explanation is that the time difference comes from the time it took for the plane to get situated in a way such that one of the perspective cameras lined up with the clock tower just right. In other words, the plane could have been busy taking pictures of the lake in The Vale (north) from above, but at that time, one of its cameras were pointing towards the clock tower from the side. The pictures of the other side would have been taken while the plane was somewhere in Selly Oak (south) by the opposite perspective camera a couple of hours late. Either way, pretty cool stuff.\n\nLet’s see what Google Earth has to offer.\n\n<a href=\"http://amar.io/blog/wp-content/uploads/2013/10/old-joe-google.png\"><img class=\"size-full wp-image-131 \" alt=\"Well, that’s embarrassing…\" src=\"http://amarport.com/blog/wp-content/uploads/2013/10/old-joe-google.png\" width=\"841\" height=\"609\" /></a> *Well, that’s embarrassing…*\n\nWeak. Well known places get a lot of attention when crafted, especially when it’s by volunteers. Here, the Great Hall (building with the largest Dome) has it’s entrance blocked by a mysterious clock face that I can assure you is not there in real life.\n\nApple++ for decent automatic mapping software! Get it together, Google!\n\nUpdate: I spoke to my project supervisor about this recently and he mentioned how SketchUp can let you take an image of something and define outlines manually on it and let it automatically extrude and skin a model for you (search: \"Photo Match\"). That would explain how the clock tower skin covers the entrance to the Great Hall; the image that was used to build the models was taken from an angle where the clock tower was covering the Great Hall and hence the model!","html":"<p>With the release of OS X Mavericks came a bunch of new features like full screen support on multiple monitors (about time, Apple!). One other such feature is the new Maps app. Its unique selling point is 3D flyover maps. How does it work?<!--more--></p>\n\n<p><a href=\"http://amar.io/blog/wp-content/uploads/2013/10/new-york-3d.png\"><img class=\"size-full wp-image-127 \" alt=\"New York City, now in 3D!\" src=\"http://amarport.com/blog/wp-content/uploads/2013/10/new-york-3d.png\" width=\"1000\" height=\"691\" /></a> <em>New York City, now in 3D!</em></p>\n\n<p>Not too shabby! Here’s the same shot in Google Earth for comparison:</p>\n\n<p><a href=\"http://amar.io/blog/wp-content/uploads/2013/10/new-york-4d.png\"><img class=\"size-full wp-image-128 \" alt=\"Smooth as always, Google!\" src=\"http://amarport.com/blog/wp-content/uploads/2013/10/new-york-4d.png\" width=\"1107\" height=\"666\" /></a> <em>Smooth as always, Google!</em></p>\n\n<p>Sorry, but I’m gonna have to side with Google on this one on aesthetics! 3D models in Google Earth are often crowdsourced and built and skinned my hand using the idiot-proof modeling tool Google Sketchup. They’re made to look right. Apple’s Maps on the other hand are built automatically.</p>\n\n<p>Back in late 2011, Apple bought up a Swedish 3D mapping company called C3 Technologies that then disappeared off the radar. C3′s mapping technology was originally intended to help missiles home in on targets but was then used by Nokia’s map app Ovi, before Apple bought the company.</p>\n\n<p>How does it work? It involves taking pictures at a whole range of different angles to the ground from a plane then using computer vision software figure out depth from different images of the same object just like our own eyes do.<a title=\"Ultrasharp 3-D Maps\" href=\"http://www.technologyreview.com/news/423838/ultrasharp-3-d-maps/\" target=\"_blank\">[1]</a></p>\n\n<p>That’s why it gets a little wobbly when you zoom in. The advantage is that the skin quality is often much better. Here’s an image of the clock tower at my university in the Maps app:</p>\n\n<p><a href=\"http://amar.io/blog/wp-content/uploads/2013/10/old-joe-front.png\"><img class=\"size-full wp-image-130 \" alt=\"Old Joe’s Front\" src=\"http://amarport.com/blog/wp-content/uploads/2013/10/old-joe-front.png\" width=\"1002\" height=\"692\" /></a> <em>Old Joe’s Front</em></p>\n\n<p>And here it is from the other side:</p>\n\n<p><a href=\"http://amar.io/blog/wp-content/uploads/2013/10/old-joe-back.png\"><img class=\"size-full wp-image-129 \" alt=\"Old Joe’s Behind ಠ>_>ಠ\" src=\"<a href='http://amarport.com/blog/wp-content/uploads/2013/10/old-joe-back.png'>http://amarport.com/blog/wp-content/uploads/2013/10/old-joe-back.png</a>\" width=\"1001\" height=\"691\" /></a> <em>Old Joe’s Behind ಠ>_></em></p>\n\n<p>You’ll notice the that in each image, one side of the clock tower is a couple of hours apart temporally from the other side. Clearly the plane must have flown by more than once to get all the sides. Another explanation is that the time difference comes from the time it took for the plane to get situated in a way such that one of the perspective cameras lined up with the clock tower just right. In other words, the plane could have been busy taking pictures of the lake in The Vale (north) from above, but at that time, one of its cameras were pointing towards the clock tower from the side. The pictures of the other side would have been taken while the plane was somewhere in Selly Oak (south) by the opposite perspective camera a couple of hours late. Either way, pretty cool stuff.</p>\n\n<p>Let’s see what Google Earth has to offer.</p>\n\n<p><a href=\"http://amar.io/blog/wp-content/uploads/2013/10/old-joe-google.png\"><img class=\"size-full wp-image-131 \" alt=\"Well, that’s embarrassing…\" src=\"http://amarport.com/blog/wp-content/uploads/2013/10/old-joe-google.png\" width=\"841\" height=\"609\" /></a> <em>Well, that’s embarrassing…</em></p>\n\n<p>Weak. Well known places get a lot of attention when crafted, especially when it’s by volunteers. Here, the Great Hall (building with the largest Dome) has it’s entrance blocked by a mysterious clock face that I can assure you is not there in real life.</p>\n\n<p>Apple++ for decent automatic mapping software! Get it together, Google!</p>\n\n<p>Update: I spoke to my project supervisor about this recently and he mentioned how SketchUp can let you take an image of something and define outlines manually on it and let it automatically extrude and skin a model for you (search: \"Photo Match\"). That would explain how the clock tower skin covers the entrance to the Great Hall; the image that was used to build the models was taken from an angle where the clock tower was covering the Great Hall and hence the model!</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":2,"created_at":1382649250000,"created_by":2,"updated_at":1410561844768,"updated_by":1,"published_at":1382649250000,"published_by":2},{"id":12,"uuid":"e8c5cf4b-0870-4fb8-a18b-2a8a6e531327","title":"The Importance of Making Backups","slug":"the-importance-of-making-backups","markdown":"I don't know how I manage to be this insanely lucky...\r\n\r\nWhile doing some server maintenance I accidentally deleted the database that contains my entire blog (yeah, I know) with posts, comments, users, and everything else. Thanks to some incredible stroke of sheer luck, I had a corrupted the volume that my blog was on once before and simply made a new one and copied stuff over without bothering to delete the old one. That old one is the reason I could recover most of my blog (everything up to a couple of weeks ago) and there was only one other post that I've published since then.\r\n\r\nLuckily for me, glorious Google exists and their bots had already cached that last blog post, so I was able to recover that one with the aid of Google's cache. The rest of the changes I simply redid manually. The only thing I couldn't recover was the account of the single, solitary user that had subscribed to my blog, so if you're reading this loffeno, sorry!","html":"<p>I don't know how I manage to be this insanely lucky...</p>\n\n<p>While doing some server maintenance I accidentally deleted the database that contains my entire blog (yeah, I know) with posts, comments, users, and everything else. Thanks to some incredible stroke of sheer luck, I had a corrupted the volume that my blog was on once before and simply made a new one and copied stuff over without bothering to delete the old one. That old one is the reason I could recover most of my blog (everything up to a couple of weeks ago) and there was only one other post that I've published since then.</p>\n\n<p>Luckily for me, glorious Google exists and their bots had already cached that last blog post, so I was able to recover that one with the aid of Google's cache. The rest of the changes I simply redid manually. The only thing I couldn't recover was the account of the single, solitary user that had subscribed to my blog, so if you're reading this loffeno, sorry!</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":2,"created_at":1382975748000,"created_by":2,"updated_at":1382977525000,"updated_by":1,"published_at":1382975748000,"published_by":2},{"id":13,"uuid":"21372f1b-89c0-408b-87f6-c5a7b52e4ed5","title":"Doubly Linked Lists in Javascript","slug":"temp-slug-8","markdown":"In Javascript, there is no built-in implementation of stacks, queues, or anything derivative of linked lists. Most people are content with using arrays as makeshift lists. Javascript arrays are not \"real\" arrays as they act like JS objects which store their values in a hashtable (giving them a mutable feel) but you can still use list-related methods such as <em>push</em>, <em>pop</em>, <em>shift</em>, and <em>unshift.</em>\r\n\r\n&nbsp;\r\n\r\nHowever, as indices have to be reassigned when using methods such as <em>unshift</em>, which prepends elements to the array, these operations have a time complexity of O(n) as opposed to O(1) with a linked list. In certain cases it is still better to use JS arrays due to their efficiency overall, but regardless, here's a simple implementation of a doubly linked list in JavaScript.\r\n\r\nThe minimum one would need for a doubly linked list that can act as both stack and queue is the following.\r\n<pre class=\"prettyprint\">List = function () {\r\n\tthis.size = 0;\r\n};\r\n\r\nList.prototype.add = function (element) {\r\n\tif (element) {\r\n\t\tthis.tail = this.tail ? this.tail.next = { element: element, prev: this.tail } : this.head = { element: element };\r\n\t\tthis.size++;\r\n\t}\r\n\treturn this;\r\n};\r\n\r\nList.prototype.push = function (element) {\r\n\tif (element) {\r\n\t\tthis.head = this.head ? this.head.prev = { element: element, next: this.head } : this.tail = { element: element };\r\n\t\tthis.size++;\r\n\t}\r\n\treturn this;\r\n};\r\n\r\nList.prototype.poll = List.prototype.pop = function () {\r\n\tvar element = this.head ? this.head.element : undefined;\r\n\tif (element) {\r\n\t\tthis.head === this.tail ? this.head = this.tail = undefined : (this.head = this.head.next).prev = undefined;\r\n\t\tthis.size--;\r\n\t}\r\n\treturn element;\r\n};</pre>\r\nWe can then iterate through a list with a simple for-loop, and since it's doubly linked, we can go either way:\r\n<pre class=\"prettyprint\">var list = new List();\r\nlist.add('a').add('b').push('c').add(4);\r\n\r\n/* Head to Tail */\r\nfor (var node = list.head; node; node = node.next)\r\n\tconsole.log(node.element);\r\n\r\n/* Tail to Head */\r\nfor (var node = list.tail; node; node = node.prev)\r\n\tconsole.log(node.element);</pre>\r\nFor added memory, speed, and to allow tail-sharing, the doubly linked list can easily be converted to a singly linked list by simply removing all references to \".prev\". I decided to go for a doubly linked implementation for added ease of manipulation as well as resonance with Java (hence Java nomenclature: <em>add</em>, <em>poll</em>, <em>push</em>, and <em>pop</em>).\r\n\r\nThe code itself can be condensed further through obfuscation and minimisation. It's already a bit convoluted with all the ternary operations but should all make sense if you read through it slowly.\r\n\r\nOf course we could add a whole host of other useful methods depending on our needs such as the following.\r\n\r\n<pre class=\"prettyprint\">\r\n\r\n</pre>","html":"<p>In Javascript, there is no built-in implementation of stacks, queues, or anything derivative of linked lists. Most people are content with using arrays as makeshift lists. Javascript arrays are not \"real\" arrays as they act like JS objects which store their values in a hashtable (giving them a mutable feel) but you can still use list-related methods such as <em>push</em>, <em>pop</em>, <em>shift</em>, and <em>unshift.</em></p>\n\n<p>&nbsp;</p>\n\n<p>However, as indices have to be reassigned when using methods such as <em>unshift</em>, which prepends elements to the array, these operations have a time complexity of O(n) as opposed to O(1) with a linked list. In certain cases it is still better to use JS arrays due to their efficiency overall, but regardless, here's a simple implementation of a doubly linked list in JavaScript.</p>\n\n<p>The minimum one would need for a doubly linked list that can act as both stack and queue is the following.  </p>\n\n<pre class=\"prettyprint\">List = function () {  \n    this.size = 0;\n};\n\nList.prototype.add = function (element) {  \n    if (element) {\n        this.tail = this.tail ? this.tail.next = { element: element, prev: this.tail } : this.head = { element: element };\n        this.size++;\n    }\n    return this;\n};\n\nList.prototype.push = function (element) {  \n    if (element) {\n        this.head = this.head ? this.head.prev = { element: element, next: this.head } : this.tail = { element: element };\n        this.size++;\n    }\n    return this;\n};\n\nList.prototype.poll = List.prototype.pop = function () {  \n    var element = this.head ? this.head.element : undefined;\n    if (element) {\n        this.head === this.tail ? this.head = this.tail = undefined : (this.head = this.head.next).prev = undefined;\n        this.size--;\n    }\n    return element;\n};</pre>\nWe can then iterate through a list with a simple for-loop, and since it's doubly linked, we can go either way:  \n<pre class=\"prettyprint\">var list = new List();  \nlist.add('a').add('b').push('c').add(4);\n\n/* Head to Tail */\nfor (var node = list.head; node; node = node.next)  \n    console.log(node.element);\n\n/* Tail to Head */\nfor (var node = list.tail; node; node = node.prev)  \n    console.log(node.element);</pre>\nFor added memory, speed, and to allow tail-sharing, the doubly linked list can easily be converted to a singly linked list by simply removing all references to \".prev\". I decided to go for a doubly linked implementation for added ease of manipulation as well as resonance with Java (hence Java nomenclature: <em>add</em>, <em>poll</em>, <em>push</em>, and <em>pop</em>).\n\nThe code itself can be condensed further through obfuscation and minimisation. It's already a bit convoluted with all the ternary operations but should all make sense if you read through it slowly.\n\nOf course we could add a whole host of other useful methods depending on our needs such as the following.\n\n<pre class=\"prettyprint\">\n\n</pre>","image":null,"featured":0,"page":0,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":2,"created_at":1377467023000,"created_by":2,"updated_at":1377467023000,"updated_by":1,"published_at":null,"published_by":2},{"id":14,"uuid":"aee0bd47-0320-4962-a5a6-fdc22d08933d","title":"Write More","slug":"write-more","markdown":"There are a lot of things that I want to write about but never do. Usually it's due to a mixture of occupation, perfectionism, and procrastintion.\n\nTo solve the first, I've switched to [Ghost](https://ghost.org/) as a blogging platform since a while now, and I much prefer it to WordPress for a whole bunch of reasons. Also, my new policy is brutal conciceness. I'll be writing short, condensed articles so that having no time can no longer be an excuse.\n\nThe curse of perfectionism can only be lifted with practice it seems. It reaches a point where it becomes a hindering factor. If you focus too much of quality and not quantity, you'll never get anywhere. And in [certain cases](http://blog.codinghorror.com/quantity-always-trumps-quality/) (thanks for the link Aku), quantity produces superior quality. So now I'll be posting fast and frequently for greater good.\n\nFinally, I'll need to stop procrastinating. To do that I promise in writing - in the form of this blog post - that I will. Now if don't, there will be public proof of my failure to do so. And I don't want *that*!\n\nNo more excuses!","html":"<p>There are a lot of things that I want to write about but never do. Usually it's due to a mixture of occupation, perfectionism, and procrastintion.</p>\n\n<p>To solve the first, I've switched to <a href=\"https://ghost.org/\">Ghost</a> as a blogging platform since a while now, and I much prefer it to WordPress for a whole bunch of reasons. Also, my new policy is brutal conciceness. I'll be writing short, condensed articles so that having no time can no longer be an excuse.</p>\n\n<p>The curse of perfectionism can only be lifted with practice it seems. It reaches a point where it becomes a hindering factor. If you focus too much of quality and not quantity, you'll never get anywhere. And in <a href=\"http://blog.codinghorror.com/quantity-always-trumps-quality/\">certain cases</a> (thanks for the link Aku), quantity produces superior quality. So now I'll be posting fast and frequently for greater good.</p>\n\n<p>Finally, I'll need to stop procrastinating. To do that I promise in writing - in the form of this blog post - that I will. Now if don't, there will be public proof of my failure to do so. And I don't want <em>that</em>!</p>\n\n<p>No more excuses!</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":2,"created_at":1424012824506,"created_by":2,"updated_at":1424012824506,"updated_by":1,"published_at":1424012824534,"published_by":2},{"id":15,"uuid":"31a8b8eb-0d34-46a5-92a8-23c9f77f8407","title":"An Image Scraping Challenge","slug":"an-image-scraping-challenge","markdown":"*Original post from 12 March 2015 restored from backup*\n\nA little over a year ago a friend sent me a 4chan banner:\n\n![4chan banner](https://s.4cdn.org/image/title/195.gif)\n\nWe started thinking about whether or not these are randomised when we realised that they're all just static links to images with URLs that start with `https://s.4cdn.org/image/title/` and file names that range from `0.png` to `260.png` and from `0.gif` to `251.gif`.\n\nSo we challenged each other to write a scraper that would download all of these banners knowing it would be a matter of minutes. I decided to write the script in Python and he decided to write it in JavaScript with Node.js. We also agreed to have one second intervals between image downloads so we don't don't annoy moot (though I'm pretty sure we wouldn't have even made a blip in requests),\n\nTo make a long story short, Python is much better suited for this kind of job. With I/O in Node you're in callback hell or waste time on async control flow.\n\nI was hardly aiming for tiny code but here is all you need:\n\n    import urllib\n    import time\n    import os\n    \n    if not os.path.exists(\"imgs\"):\n        os.makedirs(\"imgs\")\n\n    for i in xrange(1,260):\n        urllib.urlretrieve(\"http://s.4cdn.org/image/title/\"+str(i)+\".png\", \"imgs/\"+str(i)+\".png\")\n        time.sleep(1)\n\n    for i in xrange(1,251):\n        urllib.urlretrieve(\"http://s.4cdn.org/image/title/\"+str(i)+\".gif\", \"imgs/\"+str(i)+\".gif\")\n        time.sleep(1)","html":"<p><em>Original post from 12 March 2015 restored from backup</em></p>\n\n<p>A little over a year ago a friend sent me a 4chan banner:</p>\n\n<p><img src=\"https://s.4cdn.org/image/title/195.gif\" alt=\"4chan banner\" /></p>\n\n<p>We started thinking about whether or not these are randomised when we realised that they're all just static links to images with URLs that start with <code>https://s.4cdn.org/image/title/</code> and file names that range from <code>0.png</code> to <code>260.png</code> and from <code>0.gif</code> to <code>251.gif</code>.</p>\n\n<p>So we challenged each other to write a scraper that would download all of these banners knowing it would be a matter of minutes. I decided to write the script in Python and he decided to write it in JavaScript with Node.js. We also agreed to have one second intervals between image downloads so we don't don't annoy moot (though I'm pretty sure we wouldn't have even made a blip in requests),</p>\n\n<p>To make a long story short, Python is much better suited for this kind of job. With I/O in Node you're in callback hell or waste time on async control flow.</p>\n\n<p>I was hardly aiming for tiny code but here is all you need:</p>\n\n<pre><code>import urllib\nimport time\nimport os\n\nif not os.path.exists(\"imgs\"):\n    os.makedirs(\"imgs\")\n\nfor i in xrange(1,260):\n    urllib.urlretrieve(\"http://s.4cdn.org/image/title/\"+str(i)+\".png\", \"imgs/\"+str(i)+\".png\")\n    time.sleep(1)\n\nfor i in xrange(1,251):\n    urllib.urlretrieve(\"http://s.4cdn.org/image/title/\"+str(i)+\".gif\", \"imgs/\"+str(i)+\".gif\")\n    time.sleep(1)\n</code></pre>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1431307776003,"created_by":1,"updated_at":1431307776003,"updated_by":1,"published_at":1431307776006,"published_by":1}],"users":[{"id":1,"uuid":"c06de743-a03e-445a-93cf-9f54934eed3a","name":"Yousef Amar","slug":"yousef-amar","password":"$2a$10$zTa2wshE7/x5HncEFxSX2euGWGvdshqQzv2BAvH8EucTY5Vr8zmz6","email":"yousef@amar.com","image":null,"cover":null,"bio":null,"website":null,"location":null,"accessibility":null,"status":"active","language":"en_US","meta_title":null,"meta_description":null,"last_login":1431307127914,"created_at":1431306536034,"created_by":1,"updated_at":1431307127915,"updated_by":1},{"id":2,"uuid":"b992e2cf-fdb3-4ac6-8be1-56255f7ae0ff","name":"Yousef Amar","slug":"yousef-amar-2","password":"$2a$10$BQToDNdBtBKCvnrTmMi5m.NK.7i6Qx7YASs.jTkE86I5zqxzE8klC","email":"yousefamar@gmail.com","image":"//www.gravatar.com/avatar/70502f3da266f3f107c9139afd87b004?d=404&s=250","cover":null,"bio":null,"website":null,"location":null,"accessibility":null,"status":"active","language":"en_US","meta_title":null,"meta_description":null,"last_login":1452723241433,"created_at":1431307183876,"created_by":1,"updated_at":1452723241434,"updated_by":2}],"roles":[{"id":1,"uuid":"b6fdf5d8-40ac-4f4e-b60a-d14688993ce3","name":"Administrator","description":"Administrators","created_at":1431306524462,"created_by":1,"updated_at":1431306524462,"updated_by":1},{"id":2,"uuid":"55368fa7-496f-4011-b296-5f87cebb15dc","name":"Editor","description":"Editors","created_at":1431306524464,"created_by":1,"updated_at":1431306524464,"updated_by":1},{"id":3,"uuid":"c93aeea9-1f61-42a6-8ed8-d9c72642a612","name":"Author","description":"Authors","created_at":1431306524465,"created_by":1,"updated_at":1431306524465,"updated_by":1},{"id":4,"uuid":"e9e6672b-5396-49e7-acdd-4ac581eb0b7e","name":"Owner","description":"Blog Owner","created_at":1431306524465,"created_by":1,"updated_at":1431306524465,"updated_by":1}],"roles_users":[{"id":1,"role_id":4,"user_id":1},{"id":2,"role_id":4,"user_id":2}],"permissions":[{"id":1,"uuid":"882a6d93-88b9-464a-83d8-ee7d92d6eb36","name":"Export database","object_type":"db","action_type":"exportContent","object_id":null,"created_at":1431306525511,"created_by":1,"updated_at":1431306525511,"updated_by":1},{"id":2,"uuid":"2a8003e1-4310-44f7-9849-fa886d372d86","name":"Import database","object_type":"db","action_type":"importContent","object_id":null,"created_at":1431306525588,"created_by":1,"updated_at":1431306525588,"updated_by":1},{"id":3,"uuid":"3715d11c-6da0-455a-a483-0b3ed5cfde6e","name":"Delete all content","object_type":"db","action_type":"deleteAllContent","object_id":null,"created_at":1431306525679,"created_by":1,"updated_at":1431306525679,"updated_by":1},{"id":4,"uuid":"ddfc8a54-7aeb-454f-ad1d-d40a64989cd9","name":"Send mail","object_type":"mail","action_type":"send","object_id":null,"created_at":1431306525728,"created_by":1,"updated_at":1431306525728,"updated_by":1},{"id":5,"uuid":"e96c38f4-802b-46a4-8deb-7dfb97fc09b0","name":"Browse notifications","object_type":"notification","action_type":"browse","object_id":null,"created_at":1431306525834,"created_by":1,"updated_at":1431306525834,"updated_by":1},{"id":6,"uuid":"7bc166c6-0340-44dc-a9dc-ac573e3ec4a6","name":"Add notifications","object_type":"notification","action_type":"add","object_id":null,"created_at":1431306525885,"created_by":1,"updated_at":1431306525885,"updated_by":1},{"id":7,"uuid":"a0de1b9d-c1d3-4bd1-b719-b7cf7de4e49d","name":"Delete notifications","object_type":"notification","action_type":"destroy","object_id":null,"created_at":1431306525937,"created_by":1,"updated_at":1431306525937,"updated_by":1},{"id":8,"uuid":"05d1c7c6-a2d1-48e5-b0b7-7faa63b4796c","name":"Browse posts","object_type":"post","action_type":"browse","object_id":null,"created_at":1431306525989,"created_by":1,"updated_at":1431306525989,"updated_by":1},{"id":9,"uuid":"c5f43d34-1bcc-4203-8457-9829f0bf8eba","name":"Read posts","object_type":"post","action_type":"read","object_id":null,"created_at":1431306526027,"created_by":1,"updated_at":1431306526027,"updated_by":1},{"id":10,"uuid":"2d4e9c05-b429-4388-8c5e-ead8fabbd953","name":"Edit posts","object_type":"post","action_type":"edit","object_id":null,"created_at":1431306526053,"created_by":1,"updated_at":1431306526053,"updated_by":1},{"id":11,"uuid":"a1b433fc-d842-431a-b287-c73ac8f7999d","name":"Add posts","object_type":"post","action_type":"add","object_id":null,"created_at":1431306526090,"created_by":1,"updated_at":1431306526090,"updated_by":1},{"id":12,"uuid":"006a8705-94fe-47a5-84c5-867e3a7741ae","name":"Delete posts","object_type":"post","action_type":"destroy","object_id":null,"created_at":1431306526161,"created_by":1,"updated_at":1431306526161,"updated_by":1},{"id":13,"uuid":"24a9ffbf-bb37-443a-a99f-f91e6b736cfc","name":"Browse settings","object_type":"setting","action_type":"browse","object_id":null,"created_at":1431306526208,"created_by":1,"updated_at":1431306526208,"updated_by":1},{"id":14,"uuid":"f570b2bb-ef55-4778-8b16-bb5a32739813","name":"Read settings","object_type":"setting","action_type":"read","object_id":null,"created_at":1431306526253,"created_by":1,"updated_at":1431306526253,"updated_by":1},{"id":15,"uuid":"972b75a7-3380-4863-addc-1bbe2482d5f7","name":"Edit settings","object_type":"setting","action_type":"edit","object_id":null,"created_at":1431306526297,"created_by":1,"updated_at":1431306526297,"updated_by":1},{"id":16,"uuid":"3786fd7c-888b-4fa7-b8c9-833aefc708cd","name":"Generate slugs","object_type":"slug","action_type":"generate","object_id":null,"created_at":1431306526337,"created_by":1,"updated_at":1431306526337,"updated_by":1},{"id":17,"uuid":"e5d80c44-6d04-4316-aa4b-2940c0258c6c","name":"Browse tags","object_type":"tag","action_type":"browse","object_id":null,"created_at":1431306526411,"created_by":1,"updated_at":1431306526411,"updated_by":1},{"id":18,"uuid":"78ff9a5f-ef54-4604-ad13-eea3f097eb8c","name":"Read tags","object_type":"tag","action_type":"read","object_id":null,"created_at":1431306526453,"created_by":1,"updated_at":1431306526453,"updated_by":1},{"id":19,"uuid":"21927a23-912e-4e06-8b5e-eed99dbde7ef","name":"Edit tags","object_type":"tag","action_type":"edit","object_id":null,"created_at":1431306526497,"created_by":1,"updated_at":1431306526497,"updated_by":1},{"id":20,"uuid":"09d78708-b0f7-43b7-b5d9-642811c7414d","name":"Add tags","object_type":"tag","action_type":"add","object_id":null,"created_at":1431306526540,"created_by":1,"updated_at":1431306526540,"updated_by":1},{"id":21,"uuid":"6fd81051-31c1-4541-bc21-bcf00978b07f","name":"Delete tags","object_type":"tag","action_type":"destroy","object_id":null,"created_at":1431306526591,"created_by":1,"updated_at":1431306526591,"updated_by":1},{"id":22,"uuid":"a9dc4555-1be2-4b69-8d2f-7a5a7403af74","name":"Browse themes","object_type":"theme","action_type":"browse","object_id":null,"created_at":1431306526669,"created_by":1,"updated_at":1431306526669,"updated_by":1},{"id":23,"uuid":"a2e4f0d5-7148-4e35-89e9-eacdad306128","name":"Edit themes","object_type":"theme","action_type":"edit","object_id":null,"created_at":1431306526726,"created_by":1,"updated_at":1431306526726,"updated_by":1},{"id":24,"uuid":"34dfaa2f-0ff5-48e9-8aec-fa9dd44daaaa","name":"Browse users","object_type":"user","action_type":"browse","object_id":null,"created_at":1431306526829,"created_by":1,"updated_at":1431306526829,"updated_by":1},{"id":25,"uuid":"f8fc5e64-e971-4516-88e8-f3b019b74e88","name":"Read users","object_type":"user","action_type":"read","object_id":null,"created_at":1431306526880,"created_by":1,"updated_at":1431306526880,"updated_by":1},{"id":26,"uuid":"b7d77582-5b8b-4be0-84a9-d5d898d1fff4","name":"Edit users","object_type":"user","action_type":"edit","object_id":null,"created_at":1431306526932,"created_by":1,"updated_at":1431306526932,"updated_by":1},{"id":27,"uuid":"ea09cee5-22e0-47a2-93fb-47abc2091efc","name":"Add users","object_type":"user","action_type":"add","object_id":null,"created_at":1431306527018,"created_by":1,"updated_at":1431306527018,"updated_by":1},{"id":28,"uuid":"aaca9d68-fd1c-4b41-b363-8f489abef996","name":"Delete users","object_type":"user","action_type":"destroy","object_id":null,"created_at":1431306527066,"created_by":1,"updated_at":1431306527066,"updated_by":1},{"id":29,"uuid":"8976ba6f-ce3b-49c3-ac8b-692e4452e0dc","name":"Assign a role","object_type":"role","action_type":"assign","object_id":null,"created_at":1431306527110,"created_by":1,"updated_at":1431306527110,"updated_by":1},{"id":30,"uuid":"cc4e9fa3-391e-489b-b622-60dc473c4fea","name":"Browse roles","object_type":"role","action_type":"browse","object_id":null,"created_at":1431306527157,"created_by":1,"updated_at":1431306527157,"updated_by":1}],"permissions_users":[],"permissions_roles":[{"id":1,"role_id":1,"permission_id":1},{"id":2,"role_id":1,"permission_id":2},{"id":3,"role_id":1,"permission_id":3},{"id":4,"role_id":1,"permission_id":4},{"id":5,"role_id":1,"permission_id":5},{"id":6,"role_id":1,"permission_id":6},{"id":7,"role_id":1,"permission_id":7},{"id":8,"role_id":1,"permission_id":8},{"id":9,"role_id":1,"permission_id":9},{"id":10,"role_id":1,"permission_id":10},{"id":11,"role_id":1,"permission_id":11},{"id":12,"role_id":1,"permission_id":12},{"id":13,"role_id":1,"permission_id":13},{"id":14,"role_id":1,"permission_id":14},{"id":15,"role_id":1,"permission_id":15},{"id":16,"role_id":1,"permission_id":16},{"id":17,"role_id":1,"permission_id":17},{"id":18,"role_id":1,"permission_id":18},{"id":19,"role_id":1,"permission_id":19},{"id":20,"role_id":1,"permission_id":20},{"id":21,"role_id":1,"permission_id":21},{"id":22,"role_id":1,"permission_id":22},{"id":23,"role_id":1,"permission_id":23},{"id":24,"role_id":1,"permission_id":24},{"id":25,"role_id":1,"permission_id":25},{"id":26,"role_id":1,"permission_id":26},{"id":27,"role_id":1,"permission_id":27},{"id":28,"role_id":1,"permission_id":28},{"id":29,"role_id":1,"permission_id":29},{"id":30,"role_id":1,"permission_id":30},{"id":31,"role_id":2,"permission_id":8},{"id":32,"role_id":2,"permission_id":9},{"id":33,"role_id":2,"permission_id":10},{"id":34,"role_id":2,"permission_id":11},{"id":35,"role_id":2,"permission_id":12},{"id":36,"role_id":2,"permission_id":13},{"id":37,"role_id":2,"permission_id":14},{"id":38,"role_id":2,"permission_id":16},{"id":39,"role_id":2,"permission_id":17},{"id":40,"role_id":2,"permission_id":18},{"id":41,"role_id":2,"permission_id":19},{"id":42,"role_id":2,"permission_id":20},{"id":43,"role_id":2,"permission_id":21},{"id":44,"role_id":2,"permission_id":24},{"id":45,"role_id":2,"permission_id":25},{"id":46,"role_id":2,"permission_id":26},{"id":47,"role_id":2,"permission_id":27},{"id":48,"role_id":2,"permission_id":28},{"id":49,"role_id":2,"permission_id":29},{"id":50,"role_id":2,"permission_id":30},{"id":51,"role_id":3,"permission_id":8},{"id":52,"role_id":3,"permission_id":9},{"id":53,"role_id":3,"permission_id":11},{"id":54,"role_id":3,"permission_id":13},{"id":55,"role_id":3,"permission_id":14},{"id":56,"role_id":3,"permission_id":16},{"id":57,"role_id":3,"permission_id":17},{"id":58,"role_id":3,"permission_id":18},{"id":59,"role_id":3,"permission_id":20},{"id":60,"role_id":3,"permission_id":24},{"id":61,"role_id":3,"permission_id":25},{"id":62,"role_id":3,"permission_id":30}],"permissions_apps":[],"settings":[{"id":1,"uuid":"b0ad83ee-6607-423f-915d-62618ec0fb72","key":"databaseVersion","value":"003","type":"core","created_at":1431306536206,"created_by":1,"updated_at":1431306536206,"updated_by":1},{"id":2,"uuid":"98b4579f-94ec-4eb4-98b0-cd78482ec3ae","key":"dbHash","value":"a8571816-adfa-4041-ad16-a021fb78116b","type":"core","created_at":1431306536318,"created_by":1,"updated_at":1431306536318,"updated_by":1},{"id":3,"uuid":"4bdd3d89-11b3-4f05-b842-57992f8bcac3","key":"nextUpdateCheck","value":"1452806915","type":"core","created_at":1431306536318,"created_by":1,"updated_at":1452720515166,"updated_by":1},{"id":4,"uuid":"4e71701e-8720-4012-817e-96fca4ceea95","key":"displayUpdateNotification","value":"0.5.0","type":"core","created_at":1431306536320,"created_by":1,"updated_at":1452720515169,"updated_by":1},{"id":5,"uuid":"877fd194-99a8-4ead-afe0-ceab07dc6413","key":"title","value":"Lab Book of Life","type":"blog","created_at":1431306536320,"created_by":1,"updated_at":1431307893840,"updated_by":1},{"id":6,"uuid":"9b3e1886-f662-43e7-96e2-3b30bf3dcb77","key":"description","value":"Ruminations of Yousef Amar","type":"blog","created_at":1431306536320,"created_by":1,"updated_at":1431307893843,"updated_by":1},{"id":7,"uuid":"f5347982-8705-4ab9-810a-cb0a2a562322","key":"email","value":"yousefamar@gmail.com","type":"blog","created_at":1431306536320,"created_by":1,"updated_at":1431307893844,"updated_by":1},{"id":8,"uuid":"2041cb89-2919-4ebe-9286-c0e1c78c139a","key":"logo","value":"","type":"blog","created_at":1431306536321,"created_by":1,"updated_at":1431307893847,"updated_by":1},{"id":9,"uuid":"e315155b-76c8-4865-8b2b-8c418fc2b25f","key":"cover","value":"","type":"blog","created_at":1431306536321,"created_by":1,"updated_at":1431307893849,"updated_by":1},{"id":10,"uuid":"9639745a-5243-40f0-b5a1-c447c52ef4b9","key":"defaultLang","value":"en_US","type":"blog","created_at":1431306536321,"created_by":1,"updated_at":1431307893850,"updated_by":1},{"id":11,"uuid":"3dcf8dc7-d701-42c9-a1d6-d2e252458b32","key":"postsPerPage","value":"100","type":"blog","created_at":1431306536322,"created_by":1,"updated_at":1431307893852,"updated_by":1},{"id":12,"uuid":"33973ab4-37d9-4535-b43b-7e8350d3d130","key":"forceI18n","value":"true","type":"blog","created_at":1431306536322,"created_by":1,"updated_at":1431307893853,"updated_by":1},{"id":13,"uuid":"064bbd39-3697-4b02-9118-ca536e6319bd","key":"permalinks","value":"/:slug/","type":"blog","created_at":1431306536322,"created_by":1,"updated_at":1431307893855,"updated_by":1},{"id":14,"uuid":"2fa70ffa-0d13-480e-add6-62f726d66c6c","key":"activeTheme","value":"casper","type":"theme","created_at":1431306536322,"created_by":1,"updated_at":1431307893857,"updated_by":1},{"id":15,"uuid":"a16f5ee8-5e90-4d88-be47-c6cba993ab70","key":"activeApps","value":"[]","type":"app","created_at":1431306536323,"created_by":1,"updated_at":1431307183990,"updated_by":1},{"id":16,"uuid":"21b29750-bcd4-4955-acaf-6f3506d38bf9","key":"installedApps","value":"[]","type":"app","created_at":1431306536323,"created_by":1,"updated_at":1452723175172,"updated_by":1}],"tags":[{"id":1,"uuid":"c69a60b5-ed2a-474f-bd52-efb3ff3ac32a","name":"Getting Started","slug":"getting-started","description":null,"image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1431306524460,"created_by":1,"updated_at":1431306524460,"updated_by":1},{"id":2,"uuid":"1aee9986-66ee-42a8-ac97-c681dc55dcba","name":"3D","slug":"3d","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1431307183985,"created_by":2,"updated_at":1431307183985,"updated_by":1},{"id":3,"uuid":"bd9880ee-0a5e-44b1-a7ab-5284667f7009","name":"JavaScript","slug":"javascript","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1431307183986,"created_by":2,"updated_at":1431307183986,"updated_by":1},{"id":4,"uuid":"81f7dfec-f812-49e0-920b-6a7409bbc6f8","name":"Java","slug":"java","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1431307183986,"created_by":2,"updated_at":1431307183986,"updated_by":1},{"id":5,"uuid":"00a3973f-726b-4db0-85ff-9cdc146322ad","name":"apps","slug":"apps-tag","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1431307183987,"created_by":2,"updated_at":1431307183987,"updated_by":1},{"id":6,"uuid":"faadd0c2-c19f-4783-a014-28b72228652c","name":"PHP","slug":"php","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1431307183987,"created_by":2,"updated_at":1431307183987,"updated_by":1},{"id":7,"uuid":"8691abb6-df5b-426e-a1bd-fe5b6ec592f0","name":"AS3","slug":"as3","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1431307183988,"created_by":2,"updated_at":1431307183988,"updated_by":1},{"id":8,"uuid":"47281338-8828-40c2-a75d-8e3a460a562a","name":"Apple","slug":"apple","description":"","image":null,"hidden":0,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1431307183988,"created_by":2,"updated_at":1431307183988,"updated_by":1}],"posts_tags":[{"id":2,"post_id":3,"tag_id":4},{"id":3,"post_id":4,"tag_id":4},{"id":4,"post_id":5,"tag_id":7},{"id":5,"post_id":6,"tag_id":4},{"id":6,"post_id":6,"tag_id":6},{"id":7,"post_id":7,"tag_id":3},{"id":8,"post_id":8,"tag_id":7},{"id":9,"post_id":10,"tag_id":3},{"id":10,"post_id":11,"tag_id":2},{"id":11,"post_id":11,"tag_id":5},{"id":12,"post_id":11,"tag_id":8}],"apps":[],"app_settings":[],"app_fields":[]}}]}